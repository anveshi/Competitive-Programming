#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class DNASequence {
public:
	int longestDNASequence(string sequence) {
		int n = sequence.length();
      int Ret = 0;
      for(int i=0;i<n;i++){
         for(int j=i;j<n;j++){
            bool Ok = true;
            for(int k=i;k<=j;k++){
               Ok &= (sequence[k] == 'A' || sequence[k] == 'T' || sequence[k] == 'G' || sequence[k] == 'C');
            }
            if(Ok)
               Ret = max(Ret, j-i+1);
         }
      }
      return Ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	DNASequence *obj;
	int answer;
	obj = new DNASequence();
	clock_t startTime = clock();
	answer = obj->longestDNASequence(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "TOPBOATER";
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "SUSHI";
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "GATTACA";
	p1 = 7;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "GOODLUCK";
	p1 = 1;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "VVZWKCSIQEGANULDLZESHUYHUQGRKUMFCGTATGOHMLKBIRCA";
	p1 = 6;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// For the purposes of this problem, a DNA sequence is a string consisting of the letters A, C, G, and T.
// 
// You have been hired by researchers at TopBiologist to help them with some programming tasks. The researchers have found a sequence of uppercase letters, which is given to you in the string sequence. They have asked you to write a program which find the length of the longest DNA sequence that is a substring of sequence.
// 
// A substring can be obtained from sequence by deleting some (possibly zero) characters from the beginning or end. For example, suppose sequence is the string "TOPBOATER". Then "TOP", "PBOA", "T", and "AT" are some examples of substrings of sequence. Of these examples, "T" and "AT" are DNA sequences. The answer to the problem would be 2 because "AT" is the longest such sequence and its length is 2.
// 
// Please find and return the length of the longest DNA sequence that is a substring of sequence.
// 
// DEFINITION
// Class:DNASequence
// Method:longestDNASequence
// Parameters:string
// Returns:int
// Method signature:int longestDNASequence(string sequence)
// 
// 
// CONSTRAINTS
// -sequence will contain between 1 and 50 characters, inclusive.
// -Each character of sequence will be an upper-case English letter ('A'-'Z').
// 
// 
// EXAMPLES
// 
// 0)
// "TOPBOATER"
// 
// Returns: 2
// 
// This is the example from the problem statement.
// 
// 1)
// "SUSHI"
// 
// Returns: 0
// 
// None of the substrings of "SUSHI" are DNA sequences, so the answer is 0.
// 
// 2)
// "GATTACA"
// 
// Returns: 7
// 
// 
// 
// 3)
// "GOODLUCK"
// 
// Returns: 1
// 
// 
// 
// 4)
// "VVZWKCSIQEGANULDLZESHUYHUQGRKUMFCGTATGOHMLKBIRCA"
// 
// Returns: 6
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
