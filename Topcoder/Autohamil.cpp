#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;
const int Maxn = 100;
vector <long long> graph[Maxn];
long long  N;
class Autohamil {
public:
	bool dfs(long long v, long long t){
		if(t == N)
			return true;
		for(auto x: graph[v]){
			if(x&()){
				dfs(x, t+1, visited);
			}
		}
		return false;
	}

	string check(vector <int> z0, vector <int> z1) {
		long long n = z0.size();
		N = 1LL<<n;
		for(int i=0;i<N;i++){
			graph[i].push_back(min(z0[i], z1[i]));
			graph[i].push_back(max(z0[i], z1[i]));
		}
		vector <int> visited(N, 0);
		if(dfs(1, 1))
			cout << "Exists" <<  endl;
		else
			cout << "Does not exist" << endl;
	}

};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	Autohamil *obj;
	string answer;
	obj = new Autohamil();
	clock_t startTime = clock();
	answer = obj->check(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	string p2;
	
	{
	// ----- test 0 -----
	int t0[] = {0,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Does not exist";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Exists";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,2,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,2,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Exists";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {2,2,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,2,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Does not exist";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1,2,0,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3,2,0,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Exists";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {1,2,0,4,3,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,5,4,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Exists";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	int t0[] = {1,2,0,4,4,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,5,4,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Does not exist";
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// In this problem, all strings are binary strings.
// That is, each character of a string is either '0' or '1'.
// 
// A deterministic finite automaton is a machine that processes strings.
// The automaton has a finite set of possible states.
// The states are numbered 0 through n-1, where n is the number of states.
// At any moment the automaton is in one of those states.
// At the beginning, the automaton is in state 0.
// 
// The automaton processes a string by reading it one character at a time.
// The automaton has a program (also called a "transition function"): a set of instructions that tell it how to change its state.
// Each instruction has the form "if you are in state X and you read the character Y, change your state to Z".
// There is exactly one instruction for each valid combination (X,Y).
// 
// You are given the description of a specific deterministic finite automaton: vector <int>s z0 and z1 with n elements each.
// These describe the program of the automaton.
// For each valid i, the program of the automaton contains the following instructions:
// 
// If you are in state i and you read the character '0', change your state to z0[i].
// If you are in state i and you read the character '1', change your state to z1[i].
// 
// 
// Given the automaton, you ask yourself the following question:
// Is there an input string that will cause the automaton to visit each of the n states at least once?
// Return "Exists" (quotes for clarity) if such a string exists, or "Does not exist" if there is no such string.
// 
// DEFINITION
// Class:Autohamil
// Method:check
// Parameters:vector <int>, vector <int>
// Returns:string
// Method signature:string check(vector <int> z0, vector <int> z1)
// 
// 
// CONSTRAINTS
// -z0 and z1 will contain exactly n elements. 
// -n will be between 1 and 50, inclusive.
// -Each element in z0 and z1 will be between 0 and n - 1, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {0,1}
// {0,1}
// 
// Returns: "Does not exist"
// 
// Regardless of what string you choose, the automaton will remain in state 0 during the entire computation.
// It will never change its state from 0 to 1.
// 
// 1)
// {1,1}
// {1,1}
// 
// Returns: "Exists"
// 
// Any non-empty string works.
// 
// 2)
// {1,2,2}
// {2,2,2}
// 
// Returns: "Exists"
// 
// For example, the string "01" works:
// 
// The automaton begins in state 0.
// The automaton reads the character '0' and changes its state to 1.
// The automaton reads the character '1' and changes its state to 2.
// 
// 
// 3)
// {2,2,2}
// {2,2,2}
// 
// Returns: "Does not exist"
// 
// 
// 
// 4)
// {1,2,0,3}
// {3,2,0,3}
// 
// Returns: "Exists"
// 
// 
// 
// 5)
// {1,2,0,4,3,5}
// {1,2,3,5,4,5}
// 
// Returns: "Exists"
// 
// 
// 
// 6)
// {1,2,0,4,4,5}
// {1,2,3,5,4,5}
// 
// Returns: "Does not exist"
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
