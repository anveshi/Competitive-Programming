#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;


class EllysExpression {
public:
	int getMax(vector <int> numbers, int numPluses, int numMinuses) {
		int n = numbers.size();
		sort(numbers.rbegin(),numbers.rend());
		int ans = numbers[0];
		for(int i=1;i<=numPluses;i++){
			ans+=numbers[i];
		}
		for(int i=numPluses+1;i<n;i++){
			ans-=numbers[i];
		}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1 << "," << p2;
	cout << "]" << endl;
	EllysExpression *obj;
	int answer;
	obj = new EllysExpression();
	clock_t startTime = clock();
	answer = obj->getMax(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	int t0[] = {-6,11,-13,17,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 3;
	p3 = 42;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {666};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 0;
	p3 = 666;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {100,200};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 1;
	p3 = 100;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {466,103,-687,350,446,344,777,889,650,172,-716,-608,-191,-731,168,871,410,703,68,270,598,-446,907,861,-92,387,182,-41,173,183,369,533,522,746,300,24,924,488,631,539,636,936,906,-337,737,470,556,148};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	p2 = 41;
	p3 = -3006;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Elly has N integers, given in the vector <int> numbers. She also has N-1 signs. Each of the signs is either a plus ('+') or a minus ('-'). The girl has numPluses plus signs and numMinuses minus signs. It is guaranteed that numPluses + numMinuses equals N-1.
// 
// 
// 
// Elly wants to place her numbers in a sequence and then put a single sign between each pair of integers. She can put the signs and the numbers in any order. Now the girl wonders what is the maximal value she can get after putting the signs and evaluating the expression. Help her by finding the resulting value.
// 
// DEFINITION
// Class:EllysExpression
// Method:getMax
// Parameters:vector <int>, int, int
// Returns:int
// Method signature:int getMax(vector <int> numbers, int numPluses, int numMinuses)
// 
// 
// CONSTRAINTS
// -numbers will contain between 1 and 50 elements, inclusive.
// -Each element of numbers will be between -1000 and 1000, inclusive.
// -numPluses will be between 0 and the number of elements in numbers minus one, inclusive.
// -numMinuses will be between 0 and the number of elements in numbers minus one, inclusive.
// -numPluses plus numMinuses will be exactly one less than the number of elements in numbers.
// 
// 
// EXAMPLES
// 
// 0)
// {-6, 11, -13, 17, 5}
// 1
// 3
// 
// Returns: 42
// 
// Here the best we can get is 11 - (-6) - (-13) + 17 - 5 = 42.
// 
// 1)
// {666}
// 0
// 0
// 
// Returns: 666
// 
// With a single number there are no signs and the expression is evaluated to that number.
// 
// 2)
// {100, 200}
// 0
// 1
// 
// Returns: 100
// 
// It's better to swap the numbers, since 200 - 100 > 100 - 200.
// 
// 3)
// {466, 103, -687, 350, 446, 344, 777, 889, 650, 172, -716, -608, -191, -731, 168, 871, 410, 703, 68, 270, 598, -446, 907, 861, -92, 387, 182, -41, 173, 183, 369, 533, 522, 746, 300, 24, 924, 488, 631, 539, 636, 936, 906, -337, 737, 470, 556, 148}
// 6
// 41
// 
// Returns: -3006
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
