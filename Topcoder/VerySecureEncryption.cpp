#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class VerySecureEncryption {
public:
	string encrypt(string message, vector <int> key, int K) {
		int n = message.size();
		string ret="";for(int i=0;i<n;i++){
			ret+='*';
		}
		for(int i=0;i<n;i++){
			ret[key[i]] = message[i];
		}
		if(K==1)
			return ret;
		else{
			return encrypt(ret,key,K-1);
		}
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, vector <int> p1, int p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	VerySecureEncryption *obj;
	string answer;
	obj = new VerySecureEncryption();
	clock_t startTime = clock();
	answer = obj->encrypt(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <int> p1;
	int p2;
	string p3;
	
	{
	// ----- test 0 -----
	p0 = "abc";
	int t1[] = {1,2,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	p3 = "cab";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "abcde";
	int t1[] = {4,3,2,1,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	p3 = "edcba";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "abcde";
	int t1[] = {4,3,2,1,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	p3 = "abcde";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "uogcodlk";
	int t1[] = {4,3,6,2,5,1,0,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 44;
	p3 = "goodluck";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are going to send a message to your friend.
// The message is given as the string message.
// To confuse potential eavesdroppers, you are going to scramble the message.
// 
// 
// Scrambling of a message is performed using the vector <int> key.
// If a letter is at the (0-based) position i in the original message, it will appear at the position key[i] in the scrambled message.
// (The constraints given below guarantee that this process will produce a valid scrambled message.)
// 
// 
// To make the encryption even more confusing, you are going to repeat the above process K times in a row.
// Given message, key, and the int K, find and return the final encrypted message.
// 
// DEFINITION
// Class:VerySecureEncryption
// Method:encrypt
// Parameters:string, vector <int>, int
// Returns:string
// Method signature:string encrypt(string message, vector <int> key, int K)
// 
// 
// CONSTRAINTS
// -N will be between 1 and 10, inclusive.
// -message will contain N characters.
// -Each character of message will be a lowercase English letter.
// -key will contain N elements.
// -Each element of key will be between 0 and N-1, inclusive.
// -The elements of key will be distinct.
// -K will be between 1 and 50, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// "abc"
// {1,2,0}
// 1
// 
// Returns: "cab"
// 
// 
// The character 'a' will go from position 0 to position key[0]=1.
// The character 'b' will go from position 1 to position key[1]=2.
// The character 'c' will go from position 2 to position key[2]=0.
// 
// 
// 1)
// "abcde"
// {4, 3, 2, 1, 0}
// 1
// 
// Returns: "edcba"
// 
// 
// 
// 2)
// "abcde"
// {4, 3, 2, 1, 0}
// 2
// 
// Returns: "abcde"
// 
// This is the same message and the same key as in example 1, but now K=2, so we scramble the message twice.
// For this particular key we see that each scrambling reverses the order of letters, which means that the final message is the same as the original we started with.
// 
// 3)
// "uogcodlk"
// {4, 3, 6, 2, 5, 1, 0, 7}
// 44
// 
// Returns: "goodluck"
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
