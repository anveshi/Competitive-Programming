#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;
vector <int> v[1025];
int visited[1025];
int dfs(int vertex){
	int ret=0;
	stack <int> S;
	S.push(vertex);
	while(!S.empty()){
		int t;
		t = S.top();
		S.pop();
		if(visited[t]==0){
			visited[t]=1;ret++;
			int szv = v[t].size();
			for(int i=0;i<szv;i++){
				if(visited[v[t][i]]==0)
				S.push(v[t][i]);
			} 
		}
	}
	for(int i=0;i<1025;i++)visited[i]=0;
	//cout << ret << endl;
	return ret;
}
class TheKingsRoadsDiv2 {
public:
	string getAnswer(int h, vector <int> a, vector <int> b) {
		for(int i=0;i<1025;i++)v[i].clear();
		int sz = pow(2,h) - 1;
		for(int i=0;i<sz;i++){
			v[a[i]].push_back(b[i]);
			v[b[i]].push_back(a[i]);			
		}
		int cnt = dfs(1);
		if(cnt==sz) return "Correct";
		else return "Incorrect";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	TheKingsRoadsDiv2 *obj;
	string answer;
	obj = new TheKingsRoadsDiv2();
	clock_t startTime = clock();
	answer = obj->getAnswer(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	vector <int> p2;
	string p3;
	
	{
	// ----- test 0 -----
	p0 = 3;
	int t1[] = {1,2,3,7,1,5,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {6,7,4,3,3,1,7};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Correct";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	int t1[] = {1,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,1,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Incorrect";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	int t1[] = {7,1,1,2,2,3,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {7,1,7,4,5,2,6};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Incorrect";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2;
	int t1[] = {1,3,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,1,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Correct";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 3;
	int t1[] = {6,5,3,3,5,5,6};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,5,5,6,4,7,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Correct";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// You live in the Kingdom of Byteland.
// The kingdom has a very interesting history.
// It has already existed for h years.
// During the first year of its existence the inhabitants built the first city.
// During each of the next h-1 years the following procces occurred:
// For each city built in the previous year, two additional cities were built and the older city was connected to each the two new cities by a bidirecional road.
// Now, after h full years, the kingdom contains exactly (2^h)-1 cities and (2^h)-2 roads.
// 
// 
// 
// 
// Recently the King did two changes to the kingdom.
// First, he numbered the cities from 1 to (2^h)-1 in an arbitrary way.
// Then, he added exactly one new road to the kingdom.
// (The road could have connected two cities that were already connected by a different road.
// Also, it is possible that the new road connected some city to itself.)
// 
// 
// 
// 
// You are given the int h and two vector <int>s a and b with (2^h)-1 elements each.
// For each valid i, there is a road between the cities a[i] and b[i].
// 
// 
// 
// 
// Return "Correct" if it is possible that the given list of roads is the current road network in the Kingdom of Byteland.
// Otherwise, return "Incorrect".
// 
// 
// DEFINITION
// Class:TheKingsRoadsDiv2
// Method:getAnswer
// Parameters:int, vector <int>, vector <int>
// Returns:string
// Method signature:string getAnswer(int h, vector <int> a, vector <int> b)
// 
// 
// CONSTRAINTS
// -h will be between 2 and 10, inclusive.
// -a and b will contain exactly (2^h)-1 elements each.
// -Each element of a and b will be between 1 and (2^h)-1, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 3
// {1, 2, 3, 7, 1, 5, 4}
// {6, 7, 4, 3, 3, 1, 7}
// 
// Returns: "Correct"
// 
// City 3 was built during the first year, cities 1 and 7 during the second year, and the other four cities during the third year.
// Then the King added the road 3-4.
// 
// 1)
// 2
// {1, 2, 3}
// {2, 1, 3}
// 
// Returns: "Incorrect"
// 
// 
// 
// 2)
// 3
// {7, 1, 1, 2, 2, 3, 1}
// {7, 1, 7, 4, 5, 2, 6}
// 
// Returns: "Incorrect"
// 
// 
// 
// 3)
// 2
// {1, 3, 3}
// {2, 1, 2}
// 
// Returns: "Correct"
// 
// 
// 
// 4)
// 3
// {6, 5, 3, 3, 5, 5, 6}
// {1, 5, 5, 6, 4, 7, 2}
// 
// Returns: "Correct"
// 
// Here the road added by the King is obviously the self-loop from city 5 to itself.
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
