#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class AttackOfTheClones {
public:
	int count(vector <int> firstWeek, vector <int> lastWeek) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	AttackOfTheClones *obj;
	int answer;
	obj = new AttackOfTheClones();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {1,2,3,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {4,3,2,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,2,3,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {8,4,5,1,7,6,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,4,6,8,1,3,5,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 7;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// In a galaxy far far away... each week has N days.
// Obi-Wan has exactly N shirts.
// The shirts are numbered 1 through N.
// Each day he wears one of those N shirts.
// Each week he wears each shirt exactly once.
// 
// In different weeks Obi-Wan may wear his shirts in different orders.
// However, not all orders are always possible.
// Whenever Obi-Wan wears a shirt for a day, he has to wash it before he can use it again.
// Washing and drying a shirt takes N-2 full days.
// In other words, if he wears a shirt on day x, the earliest day when he can wear it again is day x+N-1.
// 
// The Jedi council recently sent Obi-Wan on a mission that lasted for some unknown number of full N-day weeks.
// He remembers the order in which he wore his shirts during the first week of the mission.
// He also remembers the order in which he wore his shirts during the last week of the mission.
// You are given this information in vector <int>s firstWeek and lastWeek.
// Each of these vector <int>s contains N elements: the numbers of shirts he wore during that week, in order.
// 
// For example, assume that N = 4, firstWeek = {1,2,3,4}, and lastWeek = {4,3,2,1}.
// It is possible that this particular mission took four weeks.
// One possible order in which Obi-Wan could have worn his shirts looks as follows:
// 
// week 1: {1,2,3,4}
// week 2: {2,3,4,1}
// week 3: {3,4,2,1}
// week 4: {4,3,2,1}
// 
// 
// Given firstWeek and lastWeek, compute and return the smallest number of weeks the mission could have taken.
// 
// DEFINITION
// Class:AttackOfTheClones
// Method:count
// Parameters:vector <int>, vector <int>
// Returns:int
// Method signature:int count(vector <int> firstWeek, vector <int> lastWeek)
// 
// 
// NOTES
// -N can be calculated as the number of elements of firstWeek
// 
// 
// CONSTRAINTS
// -firstWeek will contain between 2 and 2500 integers inclusive.
// -firstWeek and lastWeek will contain the same number of elements.
// -firstWeek and lastWeek will represent permutations of the first N positive integers.
// 
// 
// EXAMPLES
// 
// 0)
// {1,2,3,4}
// {4,3,2,1}
// 
// Returns: 4
// 
// The example from the problem statement.
// 
// 1)
// {1,2,3,4}
// {1,2,3,4}
// 
// Returns: 1
// 
// Be careful! The first week and the last week can be indeed the same week.
// 
// 2)
// {8,4,5,1,7,6,2,3}
// {2,4,6,8,1,3,5,7}
// 
// Returns: 7
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
