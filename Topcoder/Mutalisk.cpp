#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class Mutalisk {
public:
	int minimalAttacks(vector <int> x) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	Mutalisk *obj;
	int answer;
	obj = new Mutalisk();
	clock_t startTime = clock();
	answer = obj->minimalAttacks(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {12,10,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {54,18,6};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,1,1,1,1,1,1,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {55,60,53};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 13;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {60};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 93;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Ciel is writing an AI for the game Starcraft and she needs your help.
// 
// 
// In Starcraft, one of the available units is a mutalisk.
// Mutalisks are very useful for harassing Terran bases.
// Fox Ciel has one mutalisk.
// The enemy base contains one or more Space Construction Vehicles (SCVs).
// Each SCV has some amount of hit points.
// 
// 
// When the mutalisk attacks, it can target up to three different SCVs.
// 
// The first targeted SCV will lose 9 hit points.
// The second targeted SCV (if any) will lose 3 hit points.
// The third targeted SCV (if any) will lose 1 hit point.
// 
// If the hit points of a SCV drop to 0 or lower, the SCV is destroyed.
// Note that you may not target the same SCV twice in the same attack.
// 
// 
// You are given a vector <int> x containing the current hit points of your enemy's SCVs.
// Return the smallest number of attacks in which you can destroy all these SCVs.
// 
// DEFINITION
// Class:Mutalisk
// Method:minimalAttacks
// Parameters:vector <int>
// Returns:int
// Method signature:int minimalAttacks(vector <int> x)
// 
// 
// CONSTRAINTS
// -x will contain between 1 and 20 elements, inclusive.
// -Each element in x will be between 1 and 60, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {12,10,4}
// 
// Returns: 2
// 
// You can destroy all SCVs in two attacks as follows:
// 
// Target the SCVs in the order 0, 2, 1. Their hit points after the attack will be {12-9, 10-1, 4-3} = {3, 9, 1}.
// Target the SCVs in the order 1, 0, 2. Their hit points will drop exactly to {0, 0, 0}.
// 
// 
// 1)
// {54,18,6}
// 
// Returns: 6
// 
// You should attack 6 times, always in the order 0, 1, 2.
// 
// 2)
// {1,1,1,1,1,1,1,1,1,1}
// 
// Returns: 4
// 
// There are 10 SCVs, each with just a single hit point. Your attack can kill only three of them, therefore at least 4 attacks are needed.
// 
// 3)
// {55,60,53}
// 
// Returns: 13
// 
// 
// 
// 4)
// {60}
// 
// Returns: 7
// 
// 
// 
// 5)
// {60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60}
// 
// Returns: 93
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
