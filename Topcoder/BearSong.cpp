#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class BearSong {
public:
	int countRareNotes(vector <int> notes) {
		map <int,int> M;
		M.clear();
		for(int i=0;i<notes.size();i++){
			M[notes[i]]++;
		}
		int Ans = 0;
		for(map<int,int>:: iterator it =M.begin();it!=M.end();it++){
			if(it->second == 1)
				Ans++;
		}
		return Ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	BearSong *obj;
	int answer;
	obj = new BearSong();
	clock_t startTime = clock();
	answer = obj->countRareNotes(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {9,10,7,8,9};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {8,8,7,6,7,3,5,10,9,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {234,462,715,596,906};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {17};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Bear Limak has recently learned about musical notes.
// He then listened to a song and noticed that some notes appeared less often than others.
// In fact, some notes were so rare that they appeared in the song only once!
// 
// Limak now wants to look for such notes in other songs.
// Write a program that will look for the rare notes.
// 
// You are given a vector <int> notes that describes a song.
// Each number in notes represents one note of the song.
// Different numbers represent different notes, equal numbers represent equal notes.
// 
// Compute and return the number of notes that occur exactly once in the given song.
// 
// DEFINITION
// Class:BearSong
// Method:countRareNotes
// Parameters:vector <int>
// Returns:int
// Method signature:int countRareNotes(vector <int> notes)
// 
// 
// CONSTRAINTS
// -notes will contain between 1 and 50 elements, inclusive.
// -Each element in notes will be between 1 and 1000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {9,10,7,8,9}
// 
// Returns: 3
// 
// The rare notes are the notes 7, 8, and 10.
// Each of these notes occurs exactly once in the whole song.
// The note 9 occurs twice, so it is not a rare note
// 
// 1)
// {8,8,7,6,7,3,5,10,9,3}
// 
// Returns: 4
// 
// Each of the notes 5, 6, 9, and 10 occurs exactly once in this song.
// 
// 2)
// {234,462,715,596,906}
// 
// Returns: 5
// 
// 
// 
// 3)
// {17}
// 
// Returns: 1
// 
// 
// 
// 4)
// {1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
// 1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
// 1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000}
// 
// Returns: 0
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
