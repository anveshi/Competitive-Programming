#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;
using namespace std;
const int Maxn = 785000;
int dp[2505][2505];
int c1[Maxn],c2[Maxn];
int flag[Maxn];
class BalancedSubstrings {
public:
	int countSubstrings(string s) {
		int n = s.length();
		for(int i=0;i<2505;i++){
			for(int j=0;j<2505;j++){
				dp[i][j]=0;
			}
		}
		for(int i=0;i<Maxn;i++){
			c1[i]=0;c2[i]=0;flag[i]=0;
		}
		for(int i=0;i<n;i++){
			dp[i][i] = 0;
			for(int j=i+1;j<n;j++){
				dp[i][j] = dp[i][j-1] + (j-i)*(s[j]-'0');
			}
		}
		for(int i=0;i<n;i++){
			dp[i][i] = 0;
			for(int j=i-1;j>=0;j--){
				dp[i][j] = dp[i][j+1] + (i-j)*(s[j]-'0');
			}
		}
		int ans = 0,sz;
		vector <int> v;int cc=0;
		v.clear();
		for(int i=0;i<n;i++){
			if(s[i]=='0')
				cc++;
			else{
				if(cc)
					v.push_back(cc);
				cc=0;
			}
		}
		if(cc)v.push_back(cc);
		for(int i=0;i<v.size();i++){
			ans += ((v[i])*(v[i]+1))/2;
		}
		v.clear();
		vector <int> SS;
		SS.clear();
		for(int i=0;i<n;i++){
			SS.clear();
			for(int j=0;j<n;j++){
				if(j<i){
					if(dp[i][j]<Maxn){
						SS.push_back(dp[i][j]);
						c1[dp[i][j]]++;
					}
				}
				else if(j==i){
					SS.push_back(dp[i][j]);
					c1[0]++;
					c2[0]++;
				}
				else{
					if(dp[i][j]<Maxn){
						SS.push_back(dp[i][j]);
						c2[dp[i][j]]++;
					}
				}
			}
			sz = SS.size();
			for(int k=0;k<sz;k++){
				if(flag[SS[k]]==0 && SS[k]!=0){
					ans += (c1[SS[k]])*(c2[SS[k]]);
					flag[SS[k]]=1;
					//cout << "SS " << SS[k]  << " " <<  c1[SS[k]] << " " << c2[SS[k]] << endl;
				}
			}
			for(int k=0;k<sz;k++){
					c1[SS[k]]=0;
					c2[SS[k]]=0;
					flag[SS[k]]=0;
			}
		}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	BalancedSubstrings *obj;
	int answer;
	obj = new BalancedSubstrings();
	clock_t startTime = clock();
	answer = obj->countSubstrings(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "011";
	p1 = 4;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "10111";
	p1 = 10;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "00000";
	p1 = 15;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "0000001000000";
	p1 = 91;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "100110001001";
	p1 = 49;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// This problem deals with binary strings: strings in which each character is either '0' or '1'.
// The characters are interpreted as zeros and ones.
// 
// 
// 
// Assume that we have a binary string of length N.
// Imagine the string as a horizontal lever of length N-1.
// The weight of the lever is negligible.
// On the lever, the points with integer coordinates are numbered from 0 (one end of the lever) to N-1 (the other end).
// Our string represents the distribution of weights on this lever.
// For each i, if character i of our string is '0', the corresponding point is empty, and if the character is '1', there is a unit weight at that point.
// Suppose that we place a fulcrum under the point number i.
// We say that element i of the string is a balance point if the lever is balanced on the fulcrum: the moments of force on either side cancel each other out.
// A string is called a balanced string if it has at least one balance point.
// Note that the balance point must be one of the marked points (see examples below).
// 
// 
// 
// A formal definition follows.
// For each valid index i we can compute the torque at i as follows:
// 
// For each element to the left of i, take its value, multiply it by its distance from i, and add all those results together to obtain the value A.
// For each element to the right of i, take its value, multiply it by its distance from i, and add all those results together to obtain the value B.
// The torque at i is computed as (A - B).
// 
// We say that index i is a balance point if the torque at i is exactly zero.
// (Note that the value of the element at index i isn't used in the definition and therefore it can be arbitrary.)
// 
// 
// 
// For example, the string "10100001" is a balanced string.
// Its balance point is the (0-based) index i=3.
// If we put the fulcrum under the lever at this position, we see "101" to the left and "0001" to the right.
// On the left side we get A = 1*3 + 0*2 + 1*1 = 4, and on the right side we get B = 0*1 + 0*2 + 0*3 + 1*4 = 4, hence A-B is exactly zero.
// 
// 
// 
// The string "0001" is also a balanced string, as its last character is a balance point.
// The string "11" is not a balanced string, as neither of its two characters is a balance point.
// 
// 
// 
// You are given a string s that is a binary string.
// Return the number of nonempty substrings of s that are balanced.
// 
// 
// 
// Substrings that consist of the same characters but occur elsewhere in s are considered different substrings.
// If they are balanced, each of them should be counted separately.
// For example, the string "00000" contains four distinct occurrences of the substring "00".
// 
// 
// DEFINITION
// Class:BalancedSubstrings
// Method:countSubstrings
// Parameters:string
// Returns:int
// Method signature:int countSubstrings(string s)
// 
// 
// CONSTRAINTS
// -s will have between 1 and 2,500 characters, inclusive.
// -Each character in s will be '0' or '1'.
// 
// 
// EXAMPLES
// 
// 0)
// "011"
// 
// Returns: 4
// 
// The balanced substrings in this case are {"0", "1", "1", "01"}
// 
// 1)
// "10111"
// 
// Returns: 10
// 
// The balanced substrings are {"1", "0", "1", "1", "1", "10", "01", "101", "111", "0111"}
// 
// 2)
// "00000"
// 
// Returns: 15
// 
// All substrings in this case are balanced.
// 
// 3)
// "0000001000000"
// 
// Returns: 91
// 
// 
// 
// 4)
// "100110001001"
// 
// Returns: 49
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
