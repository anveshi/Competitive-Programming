#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class FarmvilleDiv2 {
public:
	int minTime(vector <int> time, vector <int> cost, int budget) {
		int n = cost.size();
		pair <int,int> P[n];
		for(int i=0;i<n;i++){
			P[i].first = cost[i];
			P[i].second = time[i];
		}
		int Ans = 0;
		for(int i=0;i<n;i++){
			Ans += time[i];
		}
		sort(P,P+n);
		for(int i=0;i<n;i++){
			while(P[i].second>0 && budget>=P[i].first){
				P[i].second -= 1;
				Ans--;
				budget -= P[i].first;
			}
		}
		return Ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	FarmvilleDiv2 *obj;
	int answer;
	obj = new FarmvilleDiv2();
	clock_t startTime = clock();
	answer = obj->minTime(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	int t0[] = {100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 26;
	p3 = 74;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 101;
	p3 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {2,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1,2,3,4,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {5,4,3,2,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 15;
	p3 = 6;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {100,100,100,100,100,100,100,100,100,100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,4,6,8,10,1,3,5,7,9};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5000;
	p3 = 50;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {30,40,20,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {10,20,30,40};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	p3 = 100;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Farmer John recently found out about a popular online farming game.
// 
// 
// 
// There are n types of plants in the game.
// The types are numbered 0 through n-1.
// At the beginning of the game, Farmer John is given one seed of each plant type.
// 
// 
// 
// There is a single plot of land.
// At any time the plot can only contain at most one plant.
// Whenever the plot is empty, Farmer John can plant one of the seeds.
// Once a seed of type i is planted, it takes time[i] seconds until it grows into a fully developed plant.
// When that happens, Farmer John will harvest the plant and the plot will become empty again.
// Planting a seed and harvesting a plant happens instanteously.
// 
// 
// 
// Farmer John also has budget coins.
// He can spend these coins to make his plants grow faster.
// For each i, Farmer John may pay cost[i] coins to reduce time[i] by 1.
// Farmer John may pay for the same plant multiple times, each time decreasing its growing time by 1.
// Obviously, the growing time cannot be reduced below 0.
// 
// 
// 
// You are given the vector <int>s time and cost with n elements each, and the int budget.
// Determine and return the minimum amount of time in which Farmer John can grow a single plant of each type.
// 
// 
// DEFINITION
// Class:FarmvilleDiv2
// Method:minTime
// Parameters:vector <int>, vector <int>, int
// Returns:int
// Method signature:int minTime(vector <int> time, vector <int> cost, int budget)
// 
// 
// NOTES
// -The value of n is not given as a separate argument. Instead, you can determine it as the number of elements in time.
// 
// 
// CONSTRAINTS
// -n will be between 1 and 50, inclusive.
// -time,cost will have exactly n elements.
// -Each element of time,cost will be between 1 and 100, inclusive.
// -budget will be between 1 and 5,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {100}
// {1}
// 26
// 
// Returns: 74
// 
// In this case, we have a single plant that takes 100 seconds to grow. We can reduce the time it takes to grow by 1 second at a cost of 1 coin. Since we have 26 coins, we can use all our coins to reduce the time it takes the plant to grow to only 74 seconds.
// 
// 1)
// {100}
// {1}
// 101
// 
// Returns: 0
// 
// 
// 
// 2)
// {2,1}
// {1,1}
// 3
// 
// Returns: 0
// 
// Here we have two plants.
// Without payments, plant 0 will grow in 2 seconds and plant 1 will grow in 1 second.
// We have a budget of 3 coins.
// We can pay 1+1 to decrease the growing time of plant 0 from 2 to 0.
// We can then pay 1 to decrease the growing time of plant 1 from 1 to 0.
// 
// 3)
// {1,2,3,4,5}
// {5,4,3,2,1}
// 15
// 
// Returns: 6
// 
// 
// 
// 4)
// {100,100,100,100,100,100,100,100,100,100}
// {2,4,6,8,10,1,3,5,7,9}
// 5000
// 
// Returns: 50
// 
// 
// 
// 5)
// {30,40,20,10}
// {10,20,30,40}
// 5
// 
// Returns: 100
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
