#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;


class RobotOnMoonEasy {
public:
	string isSafeCommand(vector <string> board, string S) {
	int i,j;
	pair <int,int> pos;
	int n = board.size();
	int l = board[0].length();
	for(i=0;i<n;i++){
		for(j=0;j<l;j++){
			if(board[i][j]=='S')
				pos = make_pair(i,j);
		}
	}
	int Sz = S.size();
	for(int k=0;k<Sz;k++){
		if(pos.first == 0 && S[k]== 'U')
			return  "Dead";
		if(pos.first == n-1 && S[k]== 'D')
			return  "Dead";
		if(pos.second == 0 && S[k]== 'L')
			return  "Dead";
		if(pos.second == l-1 && S[k]== 'R')
			return  "Dead";
		else{
			i = pos.first;j =pos.second;
			if(S[k]=='U'){
				if(board[i-1][j]!='#')
					pos.first-=1;
			}
			if(S[k]=='D'){
				if(board[i+1][j]!='#')
					pos.first+=1;
			}
			if(S[k]=='L'){
				if(board[i][j-1]!='#')
					pos.second-=1;
			}
			if(S[k]=='R'){
				if(board[i][j+1]!='#')
					pos.second+=1;
			}
		}
	}
	return "Alive";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	RobotOnMoonEasy *obj;
	string answer;
	obj = new RobotOnMoonEasy();
	clock_t startTime = clock();
	answer = obj->isSafeCommand(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	string p2;
	
	{
	// ----- test 0 -----
	string t0[] = {".....",".###.","..S#.","...#."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "URURURURUR";
	p2 = "Alive";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {".....",".###.","..S..","...#."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "URURURURUR";
	p2 = "Dead";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {".....",".###.","..S..","...#."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "URURU";
	p2 = "Alive";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"#####","#...#","#.S.#","#...#","#####"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "DRULURLDRULRUDLRULDLRULDRLURLUUUURRRRDDLLDD";
	p2 = "Alive";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"#####","#...#","#.S.#","#...#","#.###"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "DRULURLDRULRUDLRULDLRULDRLURLUUUURRRRDDLLDD";
	p2 = "Dead";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"S"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "R";
	p2 = "Dead";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// There is a robot on the moon.
// You are given a vector <string> board containing the map of a rectangular area.
// The robot is currently located somewhere in that area.
// In the map, the character '.' (period) represents an empty square, 'S' represents an empty square that currently contains the robot, and '#' represents an obstacle.
// 
// 
// You are also given a string S.
// This string represents a sequence of commands we are going to send to the robot.
// Each character in S is one of 'U', 'D', 'L', and 'R', representing a step up, down, left, and right, respectively.
// 
// 
// Whenever the robot receives a command, one of three things will happen:
// 
// If the requested move leads to an empty square, the robot performs the move.
// If the requested move leads to a square with an obstacle, the robot ignores the command and remains in place.
// If the requested move leads out of the mapped area, the robot leaves the mapped area and dies immediately.
// 
// 
// 
// Given the map and the sequence of commands, compute whether the robot will survive.
// Return "Alive" (quotes for clarity) if the robot is still somewhere on the map after the last command.
// Otherwise, return "Dead".
// Note that the return value is case-sensitive.
// 
// DEFINITION
// Class:RobotOnMoonEasy
// Method:isSafeCommand
// Parameters:vector <string>, string
// Returns:string
// Method signature:string isSafeCommand(vector <string> board, string S)
// 
// 
// NOTES
// -The direction 'U' corresponds to moving from board[i][j] to board[i-1][j]. The direction 'L' corresponds to moving from board[i][j] to board[i][j-1].
// 
// 
// CONSTRAINTS
// -board will contain between 1 and 50 elements, inclusive.
// -Each element of board will contain between 1 and 50 characters.
// -Each element of board will contain the same number of characters.
// -The characters in board will be '.', '#' or 'S'.
// -There will be exactly one 'S' in board.
// -S will contain between 1 and 50 characters, inclusive.
// -Each character in S will be one of 'U', 'D', 'L', 'R'.
// 
// 
// EXAMPLES
// 
// 0)
// {".....",
//  ".###.",
//  "..S#.",
//  "...#."}
// "URURURURUR"
// 
// Returns: "Alive"
// 
// The robot will never move from its starting location: commands 'U' and 'R' are sending it into obstacles, so the robot ignores them.
// 
// 1)
// {".....",
//  ".###.",
//  "..S..",
//  "...#."}
// "URURURURUR"
// 
// Returns: "Dead"
// 
// This time there is no obstacle on the robot's right side. Its execution of commands will look as follows:
// 
// 'U' leads into an obstacle. The robot ignores it.
// 'R' leads into an empty square. The robot makes a step to the right.
// 'U' leads into an obstacle. The robot ignores it.
// 'R' leads into an empty square. The robot makes a step to the right.
// The next 'U' now leads into an empty square. The robot makes a step up. After this step, the robot is in row 1, column 4. (Both indices are 0-based.)
// 'R' leads out of the map. The robot steps out of the map and dies. The remaining four commands never get executed - the robot is already dead.
// 
// 
// 2)
// {".....",
//  ".###.",
//  "..S..",
//  "...#."}
// "URURU"
// 
// Returns: "Alive"
// 
// 
// 
// 3)
// {"#####",
//  "#...#",
//  "#.S.#",
//  "#...#",
//  "#####"}
// "DRULURLDRULRUDLRULDLRULDRLURLUUUURRRRDDLLDD"
// 
// Returns: "Alive"
// 
// There are obstacles all around the map. Regardless of how the robot moves, it is safe - the obstacles will prevent it from leaving the map.
// 
// 4)
// {"#####",
//  "#...#",
//  "#.S.#",
//  "#...#",
//  "#.###"}
// "DRULURLDRULRUDLRULDLRULDRLURLUUUURRRRDDLLDD"
// 
// Returns: "Dead"
// 
// After some steps the robot will leave the map from the only empty square in the bottom row of the map.
// 
// 5)
// {"S"}
// "R"
// 
// Returns: "Dead"
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
