#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;
vector <int> fun(vector <int> &v,int l,int n){
	if(l==0)return v;
	vector <int> x;
	x.clear();
	for(int i=0;i<n/2;i++)x.pb(v[2*i+1]+v[2*i]);
	for(int i=0;i<n/2;i++)x.pb(v[2*i]-v[2*i+1]);
	for(int i=0;i<n;i++)v[i]=x[i];
	fun(v,l-1,n/2);
	return v;
} 

class Haar1D {
public:
	vector <int> transform(vector <int> data, int L) {
	return fun(data,L,data.size());
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, vector <int> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	Haar1D *obj;
	vector <int> answer;
	obj = new Haar1D();
	clock_t startTime = clock();
	answer = obj->transform(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	vector <int> p2;
	
	{
	// ----- test 0 -----
	int t0[] = {1,2,3,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	int t2[] = {3,8,-1,-2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,2,3,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	int t2[] = {11,-5,-1,-2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,2,3,4,4,3,2,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	int t2[] = {20,0,-4,4,-1,-1,1,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {94,47,46,28,39,89,75,4,28,62,69,89,34,55,81,24};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	int t2[] = {215,207,248,194,67,49,-68,-16,47,18,-50,71,-34,-20,-21,57};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// The Haar wavelet transform is possibly the earliest wavelet transform, introduced by Haar in 1909. The 1-dimensional version
// of this transform operates on a sequence of integer data as follows: First separate the sequence into pairs of adjacent values, 
// starting with the first and second values, then the third and fourth values, etc. Next, calculate the sums of each of these pairs, 
// and place the sums in order into a new sequence. Then, calculate the differences of each of the pairs (subtract the second value of 
// each pair from the first value), and append the differences in order to the end of the new sequence. The resulting sequence is a level-1 transform.
// Note that this requires the input sequence to have an even number of elements.
// 
// 
// The above describes a level-1 transform. To perform a level-2 transform, we repeat the above procedure on the first half of the sequence produced by the level-1 transform. The second half of the sequence remains unchanged from the previous level. This pattern continues for higher level transforms (i.e., a level-3 
// transform operates with the first quarter of the sequence, and so on). Note that this is always possible when the number of elements is a power of 2.
// 
// 
// See the examples for clarification.
// 
// 
// Create a class Haar1D with a method transform which takes a vector <int> data and an int L as arguments.
// The output should be a vector <int> corresponding to the level-L Haar transform of the data.
// 
// DEFINITION
// Class:Haar1D
// Method:transform
// Parameters:vector <int>, int
// Returns:vector <int>
// Method signature:vector <int> transform(vector <int> data, int L)
// 
// 
// CONSTRAINTS
// -data will contain exactly 2, 4, 8, 16 or 32 elements.
// -Each element of data will be between 0 and 100 inclusive.
// -L will be between 1 and log2(# of elements in data) inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1, 2, 3, 5}
// 1
// 
// Returns: {3, 8, -1, -2 }
// 
// Start by forming 3=1+2, the sum of the first pair; 8=3+5, the sum of the second pair; -1=1-2, the difference of the first pair; and finally, -2=3-5, the difference of the second pair. To form the output, we create a sequence of the sums in order, and the differences in order, to obtain {3, 8, -1, -2} as the level-1 transform.
// 
// 1)
// {1, 2, 3, 5}
// 2
// 
// Returns: {11, -5, -1, -2 }
// 
// From the above example, the level-1 transform is given by {3, 8, -1, -2}
// So, the level-2 transform of {1, 2, 3, 5} is simply {11, -5, -1, -2} (11=3+8, -5=3-8). 
// 
// 
// 
// 2)
// {1, 2, 3, 4, 4, 3, 2, 1}
// 3
// 
// Returns: {20, 0, -4, 4, -1, -1, 1, 1 }
// 
// 3)
// {94, 47, 46, 28, 39, 89, 75, 4, 28, 62, 69, 89, 34, 55, 81, 24}
// 2
// 
// Returns: {215, 207, 248, 194, 67, 49, -68, -16, 47, 18, -50, 71, -34, -20, -21, 57 }
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
