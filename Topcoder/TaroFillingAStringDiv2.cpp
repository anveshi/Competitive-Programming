#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;


class TaroFillingAStringDiv2 {
public:
	int getNumber(string S) {
	int n = S.length();
	int cnt=0,i=0,j;
	while(S[i]=='?'){i++;continue;}
	j=i;
	for(i=j;i<n;i++){
	if(S[i]=='?'){
		if(S[i-1]=='A')S[i]='B';
		else if(S[i-1]=='B')S[i]='A';
		}
	}
	for(i=j;i<n-1;i++)if(S[i]==S[i+1])cnt++;
	return cnt;
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	TaroFillingAStringDiv2 *obj;
	int answer;
	obj = new TaroFillingAStringDiv2();
	clock_t startTime = clock();
	answer = obj->getNumber(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "ABAA";
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "?" "?";
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "A?A";
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "A?" "?B?" "?" "?AAB?A?" "?" "?A";
	p1 = 3;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "?BB?BAAB?" "?" "?BAB?B?AAAA?ABBA?" "?" "?" "?A?AAB?BBA?A?";
	p1 = 10;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Cat Taro likes strings.
// You are given a string S.
// Each character of S is 'A', 'B', or '?'.
// 
// 
// 
// 
// To Taro, the ugliness of a string is the number of pairs of equal consecutive characters.
// For example, the ugliness of "ABABAABBB" is 3: there is one pair "AA" and two (overlapping) pairs "BB".
// 
// 
// 
// 
// Taro now wants to change each question mark in S either to 'A' or to 'B'.
// His goal is to minimize the ugliness of the resulting string.
// Return the smallest ugliness that can be achieved.
// 
// 
// DEFINITION
// Class:TaroFillingAStringDiv2
// Method:getNumber
// Parameters:string
// Returns:int
// Method signature:int getNumber(string S)
// 
// 
// CONSTRAINTS
// -S will contain between 1 and 50 characters, inclusive.
// -S will consist only of characters 'A', 'B' and '?'.
// 
// 
// EXAMPLES
// 
// 0)
// "ABAA"
// 
// Returns: 1
// 
// There is initially one pair of consecutive digits that are equal in this case. There is no characters that Taro has to replace, hence the answer is 1.
// 
// 1)
// "??"
// 
// Returns: 0
// 
// 
// 
// 2)
// "A?A"
// 
// Returns: 0
// 
// 
// 
// 3)
// "A??B???AAB?A???A"
// 
// Returns: 3
// 
// 
// 
// 4)
// "?BB?BAAB???BAB?B?AAAA?ABBA????A?AAB?BBA?A?"
// 
// Returns: 10
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
