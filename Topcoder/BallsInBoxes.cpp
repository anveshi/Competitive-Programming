#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class BallsInBoxes {
public:
	long long maxTurns(long long N, long long K) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	BallsInBoxes *obj;
	long long answer;
	obj = new BallsInBoxes();
	clock_t startTime = clock();
	answer = obj->maxTurns(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	long long p1;
	long long p2;
	
	{
	// ----- test 0 -----
	p0 = 10ll;
	p1 = 10ll;
	p2 = 0ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 100ll;
	p1 = 1ll;
	p2 = 99ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1000ll;
	p1 = 999ll;
	p2 = 1ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 10ll;
	p1 = 5ll;
	p2 = 3ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// There are N boxes arranged in a row. The boxes are numbered 0 through N-1 from left to right.
// 
// 
// Cat Snuke knows that exactly K consecutive boxes contain balls. Formally, there exists some i (0 <= i <= N-K)
// such that the boxes i, i+1, ..., i+K-1 contain balls while all others are empty.
// 
// 
// He wants to determine which boxes contain balls. In each turn, he can choose a box, open it and check whether the box contains a ball or not. Note that the result of each turn may affect his future decisions about which boxes to open in the next turns.
// 
// 
// How many turns are required to determine the positions of the balls in the worst case, assuming that Snuke uses the optimal strategy?
// 
// 
// DEFINITION
// Class:BallsInBoxes
// Method:maxTurns
// Parameters:long long, long long
// Returns:long long
// Method signature:long long maxTurns(long long N, long long K)
// 
// 
// CONSTRAINTS
// -N will be between 1 and 10^18, inclusive.
// -K will be between 1 and N, inculsive.
// 
// 
// EXAMPLES
// 
// 0)
// 10
// 10
// 
// Returns: 0
// 
// Snuke knows that all boxes contain balls, so he doesn't need to open any boxes.
// 
// 1)
// 100
// 1
// 
// Returns: 99
// 
// In the worst case, if he opens 98 boxes and none of them contains the only ball, he can't determine which box contains the ball.
// 
// 2)
// 1000
// 999
// 
// Returns: 1
// 
// There are two possibilities:
// 
// Boxes 0, 1, ..., 998 contain balls.
// Boxes 1, 2, ..., 999 contain balls.
// 
// He can determine the positions of the balls if he opens box 0.
// 
// 
// 3)
// 10
// 5
// 
// Returns: 3
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
