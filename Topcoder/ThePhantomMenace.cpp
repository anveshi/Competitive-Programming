#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class ThePhantomMenace {
public:
	int find(vector <int> doors, vector <int> droids) {
		int Ans = 0;
    for(int i=0;i<doors.size();i++){
      int x = INT_MAX;
      for(int j=0;j<droids.size();j++){
        x = min(x,abs(droids[j]-doors[i]));
      }
      Ans = max(Ans,x);
    }
      return Ans;

	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	ThePhantomMenace *obj;
	int answer;
	obj = new ThePhantomMenace();
	clock_t startTime = clock();
	answer = obj->find(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {1,2,3,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {5,6,7,8};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {10};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 9;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {2,3,5,7,11};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,8,13};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1,3,5,7,9,11,13,15,17,19};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,4,6,8,10,12,14,16,18,20};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {2,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {4,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Obi Wan Kenobi and Qui-Gon Jinn are trying to escape from the Federation to find Queen Amidala.
// They are currently trapped inside a building and they have to escape through one of the doors.
// 
// All doors are on the same side of the building.
// You are given the coordinate of each door in the vector <int> doors.
// The doors are protected by some droids.
// Currently, all those droids are standing next to the wall with the doors.
// You are given the coordinates of the droids in the vector <int> droids.
// 
// Our two heroes prefer a door that is as far as possible from all the droids.
// For example, suppose that the doors are at positions { 2, 5, 8 } and that there are two droids: one at position 1 and the other at position 10.
// The optimal door for the escape would be the door at position 5.
// For this door, the two droids are 4 and 5 units of distance away from the door.
// Hence, the closest droid is 4 units of distance away from the door.
// Each of the other two doors is closer than that to one of the droids.
// 
// Formally, the safety level of a door is equal to the distance between the door and the droid that is closest to that door.
// Compute the safety levels of all doors and return the maximum of those safety levels.
// 
// DEFINITION
// Class:ThePhantomMenace
// Method:find
// Parameters:vector <int>, vector <int>
// Returns:int
// Method signature:int find(vector <int> doors, vector <int> droids)
// 
// 
// NOTES
// -The distance between a door at coordinate x and a droid at coordinate y is |x-y|, that is, the absolute value of the difference between x and y.
// 
// 
// CONSTRAINTS
// -doors will contain between 1 and 10 elements.
// -droids will contain between 1 and 10 elements.
// -Each element of doors will be between 0 and 100 inclusive.
// -Each element of droids will be between 0 and 100 inclusive.
// -No number will appear more than once in the concatenation of doors and droids
// 
// 
// EXAMPLES
// 
// 0)
// {1,2,3,4}
// {5,6,7,8}
// 
// Returns: 4
// 
// There are four doors located at {1,2,3,4} and four droids located at {5,6,7,8}.
// The safety level of the door at position 1 can be computed as follows:
// 
// Droid at position 5 is |5-1| = 4 units of distance away from this door.
// Droid at position 6 is |6-1| = 5 units of distance away from this door.
// Droid at position 7 is |7-1| = 6 units of distance away from this door.
// Droid at position 8 is |8-1| = 7 units of distance away from this door.
// Thus, the closest droid to our door is the one at position 5, and the safety level of our door is 4.
// 
// The other three doors have safety levels equal to 3, 2, and 1, respectively.
// Thus, the best choice for the escape is the door at position 1.
// The correct return value (i.e., the largest of all safety levels) is 4.
// 
// 1)
// {1}
// {10}
// 
// Returns: 9
// 
// When there's only one candidate, there's only one choice.
// 
// 2)
// {2,3,5,7,11}
// {1,8,13}
// 
// Returns: 3
// 
// If you use door at position 2, then you are at distance 1 from droid 1.
// 
// If you use door at position 3, then you are at distance 2 from droid 1.
// 
// If you use door at position 5, then you are at distance 3 from droid 2.
// 
// If you use door at position 7, then you are at distance 1 from droid 2.
// 
// If you use door at position 11, then you are at distance 2 from droid 3.
// 
// So all doors have droids at 3 or less units of distance. If you choose door at position 5 you have droids at distances 4, 3 and 8 so that's the best choice.
// 
// 3)
// {1,3,5,7,9,11,13,15,17,19}
// {2,4,6,8,10,12,14,16,18,20}
// 
// Returns: 1
// 
// Every door is a possible choice for this test case.
// 
// 4)
// {2,1}
// {4,3}
// 
// Returns: 2
// 
// Be careful! The input isn't always sorted.
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
