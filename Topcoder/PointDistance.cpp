#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class PointDistance {
public:
  int dist(int x1,int y1,int x2,int y2){
    return (x2-x1)*(x2-x1)+(y2-y1)*(y2-y1);
  }
	vector <int> findPoint(int x1, int y1, int x2, int y2) {
    for(int i=-100;i<=100;i++){
      for(int j=-100;j<100;j++){
        if(i==x1 && j==y1)continue;
        if(i==x2 && j==y2)continue;
        if(dist(i,j,x1,y1)>dist(i,j,x2,y2)){
            vector <int> v;
            v.push_back(i);
            v.push_back(j);
            return v;
        }
      }
    }
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, vector <int> p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	PointDistance *obj;
	vector <int> answer;
	obj = new PointDistance();
	clock_t startTime = clock();
	answer = obj->findPoint(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p4.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p4[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p4.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p4[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	vector <int> p4;
	
	{
	// ----- test 0 -----
	p0 = -1;
	p1 = 0;
	p2 = 1;
	p3 = 0;
	int t4[] = {8,48};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 1;
	p2 = -1;
	p3 = -1;
	int t4[] = {25,-63};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 0;
	p1 = 1;
	p2 = 2;
	p3 = 3;
	int t4[] = {41,65};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 5;
	p1 = -4;
	p2 = -2;
	p3 = 5;
	int t4[] = {68,70};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = -50;
	p1 = -50;
	p2 = 50;
	p3 = -50;
	int t4[] = {67,4};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = -50;
	p1 = 50;
	p2 = -49;
	p3 = 49;
	int t4[] = {73,-25};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// You are given two distinct points A and B in the two-dimensional plane.
// Your task is to find any point C with the following properties:
// 
// C is different from A and B.
// Each coordinate of C is an integer between -100 and 100, inclusive.
// The distance between A and C is strictly greater than the distance between B and C.
// 
// 
// 
// 
// You are given four ints: x1, y1, x2, and y2.
// Point A has coordinates (x1,y1) and point B has coordinates (x2,y2).
// Find the coordinates (x3,y3) of one possible point C with the above properties.
// Return these coordinates as a vector <int> with two elements: element 0 is x3 and element 1 is y3.
// In other words, return the vector <int> {x3,y3}.
// 
// 
// 
// For the constraints given below it is guaranteed that a valid point C always exists.
// If there are multiple solutions, return any of them.
// 
// 
// DEFINITION
// Class:PointDistance
// Method:findPoint
// Parameters:int, int, int, int
// Returns:vector <int>
// Method signature:vector <int> findPoint(int x1, int y1, int x2, int y2)
// 
// 
// NOTES
// -In this problem we consider the standard Euclidean distance. Formally, the distance between points (xi,yi) and (xj,yj) is defined as sqrt( (xi-xj)^2 + (yi-yj)^2 ).
// 
// 
// CONSTRAINTS
// -x1,y1,x2,y2 will be between -50 and 50, inclusive.
// -(x1,y1) will be different from (x2,y2).
// 
// 
// EXAMPLES
// 
// 0)
// -1
// 0
// 1
// 0
// 
// Returns: {8, 48 }
// 
// In this example, point A is at (-1,0) and point B is at (1,0).
// Almost any point with a positive x-coordinate will be a valid answer.
// For example, your program can also return {100,100}, {2,0}, or {9,-100}.
// Note that you cannot return {1,0} because point C must not be the same as point B.
// 
// 
// 1)
// 1
// 1
// -1
// -1
// 
// Returns: {25, -63 }
// 
// (x1,y1) is (1,1) and (x2,y2) is (-1,-1).
// 
// 2)
// 0
// 1
// 2
// 3
// 
// Returns: {41, 65 }
// 
// 
// 
// 3)
// 5
// -4
// -2
// 5
// 
// Returns: {68, 70 }
// 
// 
// 
// 4)
// -50
// -50
// 50
// -50
// 
// Returns: {67, 4 }
// 
// 
// 
// 5)
// -50
// 50
// -49
// 49
// 
// Returns: {73, -25 }
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
