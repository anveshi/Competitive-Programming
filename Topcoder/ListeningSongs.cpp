#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class ListeningSongs {
public:
	int listen(vector <int> durations1, vector <int> durations2, int minutes, int T) {
		sort(durations1.begin(), durations1.end());
		sort(durations2.begin(), durations2.end());
		int Ans = 0;
		for(int i=0;i<T;i++){
			if(durations1.size()>=T)
				Ans += durations1[i];
			if(durations2.size()>=T)
			Ans += durations2[i];
		}
		minutes *= 60;
		if(minutes < Ans || durations1.size() < T || durations2.size() < T)
			return -1;
		vector <int> V;
		for(int i=T;i<durations1.size();i++){
			V.push_back(durations1[i]);
		}
		for(int i=T;i<durations2.size();i++){
			V.push_back(durations2[i]);
		}
		sort(V.begin(), V.end());
		int Ans1 = 2*T;
		for(int i=0;i<V.size();i++){
			if(Ans + V[i] <= minutes)
				Ans += V[i], Ans1++;
			else
				break;
		}
		return Ans1;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2 << "," << p3;
	cout << "]" << endl;
	ListeningSongs *obj;
	int answer;
	obj = new ListeningSongs();
	clock_t startTime = clock();
	answer = obj->listen(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	int p3;
	int p4;
	
	{
	// ----- test 0 -----
	int t0[] = {300,200,100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {400,500,600};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 17;
	p3 = 1;
	p4 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {300,200,100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {400,500,600};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 10;
	p3 = 1;
	p4 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {60,60,60};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {60,60,60};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	p3 = 2;
	p4 = 5;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {120,120,120,120,120};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {60,60,60,60,60,60};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 10;
	p3 = 3;
	p4 = 7;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {196,147,201,106,239,332,165,130,205,221,248,108,60};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {280,164,206,95,81,383,96,255,260,244,60,313,101};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 60;
	p3 = 3;
	p4 = 22;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {100,200,300};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {100,200,300};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	p3 = 1;
	p4 = -1;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	int t0[] = {100,200,300,400,500,600};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {100,200};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1000;
	p3 = 3;
	p4 = -1;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You have two favorite music bands.
// Each of them has just recorded a new album.
// You have bought both albums.
// 
// You know the durations (in seconds) of songs on each of the album.
// You are given these duration in vector <int>s durations1 and durations2.
// Elements of durations1 are the durations of songs on one of the album, elements of durations2 correspond to the songs of the other album.
// 
// You only have a limited amount of time before you have to leave for work.
// This amount of time is given in the int minutes.
// (Note that the durations are given in seconds while this time is given in minutes.)
// Given this time, you want to listen to as many different songs as possible.
// However, there is a constraint: as you are a fan of both bands, you have to listen to at least T different songs from each album.
// 
// Each song only counts if you listened to it from its beginning to its end.
// You can play the songs in any order you like.
// Selecting the next song to play and switching between albums takes zero time.
// 
// If the input data is such that it is impossible to listen to T different songs from each album in the time you have, return -1.
// Otherwise, return the largest number of different songs you can listen to.
// 
// DEFINITION
// Class:ListeningSongs
// Method:listen
// Parameters:vector <int>, vector <int>, int, int
// Returns:int
// Method signature:int listen(vector <int> durations1, vector <int> durations2, int minutes, int T)
// 
// 
// CONSTRAINTS
// -durations1 will contain between 1 and 100 elements inclusive.
// -durations2 will contain between 1 and 100 elements inclusive.
// -Each element of durations1 will be between 60 and 3,600 inclusive.
// -Each element of durations2 will be between 60 and 3,600 inclusive.
// -minutes will be between 1 and 12,000 inclusive.
// -T will be between 1 and 100 inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {300,200,100}
// {400,500,600}
// 17
// 1
// 
// Returns: 4
// 
// You have 17 minutes = 17*60 seconds = 1020 seconds before you have to leave for work.
// In this time you can listen to at most 4 songs.
// The only optimal solution is to listen to the entire first album and to the first song of the second album.
// This takes 300 + 200 + 100 + 400 = 1000 seconds, which does not exceed 1020.
// 
// 1)
// {300,200,100}
// {400,500,600}
// 10
// 1
// 
// Returns: 2
// 
// In this case you could have listened to all the songs from the first album, but you need to listen to at least one song form the second album
// 
// So you have three choices:
// 
// You can listen to the second song of the first album and the first song of the second album.
// You can listen to the third song of the first album and the first song of the second album.
// You can listen to the third song of the first album and the second song of the second album.
// 
// 
// In all these cases, you can never listen to more than 2 songs.
// 
// 2)
// {60,60,60}
// {60,60,60}
// 5
// 2
// 
// Returns: 5
// 
// Any five of these songs take exactly 5 minutes, which is precisely equal to the time you have left.
// 
// 3)
// {120,120,120,120,120}
// {60,60,60,60,60,60}
// 10
// 3
// 
// Returns: 7
// 
// 
// 
// 4)
// {196,147,201,106,239,332,165,130,205,221,248,108,60}
// {280,164,206,95,81,383,96,255,260,244,60,313,101}
// 60
// 3
// 
// Returns: 22
// 
// These are the song durations for discs 1 and 2 of The Wall, by Pink Floyd (with durations changed to 60 for songs under 60 seconds).
// 
// You want to listen to at least 3 songs from each disc in one hour.
// 
// 5)
// {100,200,300}
// {100,200,300}
// 2
// 1
// 
// Returns: -1
// 
// You don't have enough time to listen to a song from the first album and a song from the second album.
// 
// 6)
// {100,200,300,400,500,600}
// {100,200}
// 1000
// 3
// 
// Returns: -1
// 
// There is not a sufficient number of different songs on the second album: you want to listen to at least three of them but the album contains only two songs.
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
