#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;


class PerfectPermutationHard {
public:
	vector <int> reorder(vector <int> P) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, vector <int> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	PerfectPermutationHard *obj;
	vector <int> answer;
	obj = new PerfectPermutationHard();
	clock_t startTime = clock();
	answer = obj->reorder(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p1[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	
	{
	// ----- test 0 -----
	int t0[] = {2,0,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {4,0,5,2,1,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,0,5,4,1,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {2,7,3,0,6,4,5,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,7,3,0,6,2,5,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {11,8,10,1,5,4,0,7,3,9,12,6,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,8,10,2,5,7,0,9,3,11,12,6,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {0,1,4,2,3,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,4,5,3,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {0,2,6,5,7,3,1,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,6,5,7,4,3,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// A permutation A[0], A[1], ..., A[N-1] is a sequence containing each integer between 0 and N-1, inclusive, exactly once.  Each permutation A of length N has a corresponding child array B of the same length, where B is defined as follows:
// 
// 
// B[0] = 0
// B[i] = A[B[i-1]], for every i between 1 and N-1, inclusive.
// 
// 
// A permutation is considered perfect if its child array is also a permutation.
// 
// Below are given all permutations for N=3 with their child arrays. Note that for two of these permutations ({1, 2, 0} and {2, 0, 1}) the child array is also a permutation, so these two permutations are perfect.
// 
// 
// Permutation		Child array
// {0, 1, 2}		{0, 0, 0}
// {0, 2, 1}		{0, 0, 0}
// {1, 0, 2}		{0, 1, 0}
// {1, 2, 0}		{0, 1, 2}
// {2, 0, 1}		{0, 2, 1}
// {2, 1, 0}		{0, 2, 0}
// 
// 
// You are given a vector <int> P containing a permutation of length N.  Find a perfect permutation Q of the same length such that the difference between P and Q is as small as possible.  The difference between P and Q is the number of indices i for which P[i] and Q[i] are different.  If there are several such permutations Q, return the one among them that has the lexicographically smallest child array.
// 
// DEFINITION
// Class:PerfectPermutationHard
// Method:reorder
// Parameters:vector <int>
// Returns:vector <int>
// Method signature:vector <int> reorder(vector <int> P)
// 
// 
// NOTES
// -vector <int> A comes before vector <int> B (with the same length) lexicographically if A has a smaller integer at the first position where the arrays differ.
// 
// 
// CONSTRAINTS
// -P will contain between 1 and 50 elements, inclusive.
// -P will contain each integer between 0 and N-1, inclusive, exactly once, where N is the number of elements in P.
// 
// 
// EXAMPLES
// 
// 0)
// {2, 0, 1}
// 
// Returns: {2, 0, 1 }
// 
// This permutation is already perfect.
// 
// 1)
// {4, 0, 5, 2, 1, 3}
// 
// Returns: {2, 0, 5, 4, 1, 3 }
// 
// Here the smallest possible difference between P and Q is 2. There are 9 possible choices for Q: {2,0,5,4,1,3}, {3,0,5,2,1,4}, {4,0,1,2,5,3}, {4,0,5,1,2,3}, {4,0,5,2,3,1}, {4,2,5,0,1,3}, {4,3,5,2,1,0}, {4,5,0,2,1,3} and {5,0,4,2,1,3}. Among them, {2,0,5,4,1,3} has the lexicographically smallest child array (this array is {0,2,5,3,4,1}).
// 
// 2)
// {2, 7, 3, 0, 6, 4, 5, 1}
// 
// Returns: {1, 7, 3, 0, 6, 2, 5, 4 }
// 
// 
// 
// 3)
// {11, 8, 10, 1, 5, 4, 0, 7, 3, 9, 12, 6, 2}
// 
// Returns: {1, 8, 10, 2, 5, 7, 0, 9, 3, 11, 12, 6, 4 }
// 
// 
// 
// 4)
// {0, 1, 4, 2, 3, 5}
// 
// Returns: {1, 2, 4, 5, 3, 0 }
// 
// 
// 
// 5)
// {0, 2, 6, 5, 7, 3, 1, 4}
// 
// Returns: {1, 2, 6, 5, 7, 4, 3, 0 }
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
