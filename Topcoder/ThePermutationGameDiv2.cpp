#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;

class ThePermutationGameDiv2 {
public:
	long long findMin(int N) {
		LL i,l,g,m,ans=1LL;
		for(i=1;i<=N;i++){
			m = ans*i;
			g =__gcd(ans,i);
			l =m/g;
			ans =l;
		}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	ThePermutationGameDiv2 *obj;
	long long answer;
	obj = new ThePermutationGameDiv2();
	clock_t startTime = clock();
	answer = obj->findMin(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	long long p1;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 2ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 6ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 6;
	p1 = 60ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 11;
	p1 = 27720ll;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 25;
	p1 = 26771144400ll;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 35;
	p1 = 144403552893600ll;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 26;
	p1 = 26771144400ll;
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Alice and Bob are playing a game called "The Permutation Game".
// The game is parameterized with the int N.
// At the start of the game, Alice chooses a positive integer x, and Bob chooses a permutation of the first N positive integers.
// Let p be Bob's permutation.
// Alice will start at 1, and apply the permutation to this value x times.
// More formally, let f(1) = p[1], and f(m) = p[f(m-1)] for all m >= 2.
// Alice's final value will be f(x).
// 
// Alice wants to choose the smallest x such that f(x) = 1 for any permutation Bob can provide.
// 
// Compute and return the value of such x.
// 
// 
// DEFINITION
// Class:ThePermutationGameDiv2
// Method:findMin
// Parameters:int
// Returns:long long
// Method signature:long long findMin(int N)
// 
// 
// NOTES
// -The return value will fit into a signed 64-bit integer.
// -A permutation of the first N positive integers is a sequence of length N that contains each of the integers 1 through N exactly once. The i-th (1-indexed) element of a permutation p is denoted by p[i].
// 
// 
// CONSTRAINTS
// -N will be between 1 and 35 inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 
// Returns: 2
// 
//  
// Bob can choose the permutations {1,2} or {2,1}.
// If Alice chooses 1, then, Bob can choose the permutation {2,1}, which would would make f(1) = 2.
// However, if Alice chooses 2, no matter which permutation Bob chooses, Alice will get f(2) = 1.
// Thus the answer in this case is 2.
// 
// 
// 1)
// 3
// 
// Returns: 6
// 
// 
// 
// 2)
// 6
// 
// Returns: 60
// 
// 
// 
// 3)
// 11
// 
// Returns: 27720
// 
// 
// 
// 4)
// 25
// 
// Returns: 26771144400
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
