#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class OrderOfOperationsDiv2 {
public:
	int minTime(vector <string> s) {
		int n = s.size();
		int m = s[0].size();
		int ans =0,flag=1;
		while(flag){
			flag=0;
			for(int i=0;i<n;i++){
				for(int j=0;j<m;j++){
					if(s[i][j]=='1'){
						flag=1;
						break;
					}
				}
				if(flag)break;
			}
			int mini = 0;
			int mintcnt=1000;
			for(int i=0;i<n;i++){
				int cnt=0;
				for(int j=0;j<m;j++){
					if(s[i][j]=='1')
						cnt++;
				}
				if(cnt<mintcnt && cnt!=0){
					mini = i;
					mintcnt = cnt;
				}
			}
			if(mintcnt!=1000)
				ans+=(mintcnt*mintcnt);
			for(int i=0;i<n;i++){
				if(i==mini)continue;
				for(int j=0;j<m;j++){
					if(s[mini][j]=='1')
						s[i][j]='0';
				}
			}
			for(int i=0;i<m;i++){
				s[mini][i]='0';
			}
		}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	OrderOfOperationsDiv2 *obj;
	int answer;
	obj = new OrderOfOperationsDiv2();
	clock_t startTime = clock();
	answer = obj->minTime(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"111","001","010"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"11101","00111","10101","00000","11000"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 9;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"11111111111111111111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 400;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"1000","1100","1110"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"111","111","110","100"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Cat Noku has just finished writing his first computer program.
// Noku's computer has m memory cells.
// The cells have addresses 0 through m-1.
// Noku's program consists of n instructions.
// The instructions have mutually independent effects and therefore they may be executed in any order.
// The instructions must be executed sequentially (i.e., one after another) and each instruction must be executed exactly once.
// 
// 
// 
// You are given a description of the n instructions as a vector <string> with n elements.
// Each instruction is a string of m characters.
// For each i, character i of an instruction is '1' if this instruction accesses memory cell i, or '0' if it does not.
// 
// 
// 
// Noku's computer uses caching, which influences the time needed to execute an instruction.
// More precisely, executing an instruction takes k^2 units of time, where k is the number of new memory cells this instruction accesses.
// (I.e., k is the number of memory cells that are accessed by this instruction but have not been accessed by any previously executed instruction.
// Note that k may be zero, in which case the current instruction is indeed executed in 0 units of time.)
// 
// 
// 
// Noku's instructions can be executed in many different orders.
// Clearly, different orders may lead to a different total time of execution.
// Find and return the shortest amount of time in which it is possible to execute all instructions.
// 
// 
// DEFINITION
// Class:OrderOfOperationsDiv2
// Method:minTime
// Parameters:vector <string>
// Returns:int
// Method signature:int minTime(vector <string> s)
// 
// 
// CONSTRAINTS
// -n,m will be between 1 and 20, inclusive.
// -s will have exactly n elements.
// -Each element of s will have exactly m characters.
// -Each character of s[i] will be either '0' or '1' for all valid i.
// 
// 
// EXAMPLES
// 
// 0)
// {
//  "111",
//  "001",
//  "010"
// }
// 
// Returns: 3
// 
// Cat Noku has 3 instructions.
// The first instruction ("111") accesses all three memory cells.
// The second instruction ("001") accesses only memory cell 2.
// The third instruction ("010") accesses only memory cell 1.
// If Noku executes these three instructions in the given order, it will take 3^2 + 0^2 + 0^2 = 9 units of time.
// However, if he executes them in the order "second, third, first", it will take only 1^2 + 1^2 + 1^2 = 3 units of time.
// This is one optimal solution.
// Another optimal solution is to execute the instructions in the order "third, second, first".
// 
// 1)
// {
//  "11101",
//  "00111",
//  "10101",
//  "00000",
//  "11000"
// }
// 
// Returns: 9
// 
// 
// 
// 2)
// {
//   "11111111111111111111"
// }
// 
// Returns: 400
// 
// A single instruction that accesses all 20 memory cells.
// 
// 3)
// {
//   "1000",
//   "1100",
//   "1110"
// }
// 
// Returns: 3
// 
// 
// 
// 4)
// {
//   "111",
//   "111",
//   "110",
//   "100"
// }
// 
// Returns: 3
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
