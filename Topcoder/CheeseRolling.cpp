#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;


class CheeseRolling {
public:
	vector<long long> waysToWin(vector <string> wins) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector<long long> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	CheeseRolling *obj;
	vector<long long> answer;
	obj = new CheeseRolling();
	clock_t startTime = clock();
	answer = obj->waysToWin(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p1[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector<long long> p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"NN","YN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	long long t1[] = {0ll,2ll};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"NYNY","NNYN","YNNY","NYNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	long long t1[] = {8ll,0ll,16ll,0ll};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"NYNYNYNY","NNYNYNYY","YNNNNNNN","NYYNNYNY","YNYYNYYY","NYYNNNNN","YNYYNYNN","NNYNNYYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	long long t1[] = {4096ll,8960ll,0ll,2048ll,23808ll,0ll,1408ll,0ll};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"NYNNNNYYNYYNNYNN","NNNNNNNNNYYNYYNY","YYNYYNNNNYYYYYYN","YYNNYYYNYNNYYYNY","YYNNNYYNYYNNNNYY","YYYNNNNYYNNYYNYN","NYYNNYNYNYNYYYYN","NYYYYNNNYYNYNYYY","YYYNNNYNNYYYYNNN","NNNYNYNNNNNNYYNY","NNNYYYYYNYNYYYNN","YYNNYNNNNYNNYNNY","YNNNYNNYNNNNNYNN","NNNNYYNNYNNYNNYY","YYNYNNNNYYYYYNNN","YNYNNYYNYNYNYNYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	long long t1[] = {331616878592ll,37267079168ll,2426798866432ll,2606831599616ll,994941665280ll,1162501849088ll,1888166674432ll,4632734203904ll,832881524736ll,84707409920ll,3007127748608ll,55490052096ll,17818550272ll,254672666624ll,629921447936ll,1959311671296ll};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"NYYYYYYYYYYYYYYY","NNYYYYYYYYYYYYYY","NNNYYYYYYYYYYYYY","NNNNYYYYYYYYYYYY","NNNNNYYYYYYYYYYY","NNNNNNYYYYYYYYYY","NNNNNNNYYYYYYYYY","NNNNNNNNYYYYYYYY","NNNNNNNNNYYYYYYY","NNNNNNNNNNYYYYYY","NNNNNNNNNNNYYYYY","NNNNNNNNNNNNYYYY","NNNNNNNNNNNNNYYY","NNNNNNNNNNNNNNYY","NNNNNNNNNNNNNNNY","NNNNNNNNNNNNNNNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	long long t1[] = {20922789888000ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// N people (where N is a power of 2) are taking part in a single-elimination tournament in cheese rolling.
// The diagram below illustrates the structure of the tournament bracket.
// 
// 
// 
// 
// 
// The people entering the tournament are numbered from 0 to N-1.
// For each potential cheese rolling match you know who would win the match.
// You are given this information encoded as a vector <string> wins with N elements, each containing N characters.
// For each valid i and j, wins[i][j] is 'Y' if person i beats person j.
// Otherwise, wins[i][j] is 'N'.
// The relation is not necessarily transitive: it may be the case that person i beats person j, person j beats person k, and person k beats person i.
// 
// 
// There are N! (N factorial) ways to assign the people to positions in the bracket.
// Different assignments may produce a different winner of the tournament.
// Return a vector<long long> with N elements.
// For each valid i, element i of the return value should be the exact number of assignments for which person i wins the tournament.
// 
// DEFINITION
// Class:CheeseRolling
// Method:waysToWin
// Parameters:vector <string>
// Returns:vector<long long>
// Method signature:vector<long long> waysToWin(vector <string> wins)
// 
// 
// CONSTRAINTS
// -N will be between 2 and 16, inclusive.
// -N will be a power of 2.
// -wins will contain exactly N elements.
// -Each element of wins will have a length of exactly N.
// -Each element of wins will be composed of the characters 'Y' and 'N'.
// -For each i from 0 to N-1, wins[i][i] = 'N'.
// -For all distinct integers i and j from 0 to N-1, exactly one of wins[i][j] and wins[j][i] will be 'Y'.
// 
// 
// EXAMPLES
// 
// 0)
// {"NN",
//  "YN"}
// 
// Returns: {0, 2 }
// 
// There are 2 ways to assign the players:
// 
// Player 0 goes to position 0 and player 1 goes to position 1.
// Player 1 goes to position 0 and player 0 goes to position 1.
// 
// In both assignments, player 1 will win the match against player 0 because wins[1][0] = 'Y'.
// 
// 1)
// {"NYNY",
//  "NNYN",
//  "YNNY",
//  "NYNN"}
// 
// Returns: {8, 0, 16, 0 }
// 
// 
// 
// 2)
// {"NYNYNYNY",
//  "NNYNYNYY",
//  "YNNNNNNN",
//  "NYYNNYNY",
//  "YNYYNYYY",
//  "NYYNNNNN",
//  "YNYYNYNN",
//  "NNYNNYYN"}
// 
// Returns: {4096, 8960, 0, 2048, 23808, 0, 1408, 0 }
// 
// 
// 
// 3)
// {"NYNNNNYYNYYNNYNN",
//  "NNNNNNNNNYYNYYNY",
//  "YYNYYNNNNYYYYYYN",
//  "YYNNYYYNYNNYYYNY",
//  "YYNNNYYNYYNNNNYY",
//  "YYYNNNNYYNNYYNYN",
//  "NYYNNYNYNYNYYYYN",
//  "NYYYYNNNYYNYNYYY",
//  "YYYNNNYNNYYYYNNN",
//  "NNNYNYNNNNNNYYNY",
//  "NNNYYYYYNYNYYYNN",
//  "YYNNYNNNNYNNYNNY",
//  "YNNNYNNYNNNNNYNN",
//  "NNNNYYNNYNNYNNYY",
//  "YYNYNNNNYYYYYNNN",
//  "YNYNNYYNYNYNYNYN"}
// 
// Returns: {331616878592, 37267079168, 2426798866432, 2606831599616, 994941665280, 1162501849088, 1888166674432, 4632734203904, 832881524736, 84707409920, 3007127748608, 55490052096, 17818550272, 254672666624, 629921447936, 1959311671296 }
// 
// 
// 
// 4)
// {"NYYYYYYYYYYYYYYY",
//  "NNYYYYYYYYYYYYYY",
//  "NNNYYYYYYYYYYYYY",
//  "NNNNYYYYYYYYYYYY",
//  "NNNNNYYYYYYYYYYY",
//  "NNNNNNYYYYYYYYYY",
//  "NNNNNNNYYYYYYYYY",
//  "NNNNNNNNYYYYYYYY",
//  "NNNNNNNNNYYYYYYY",
//  "NNNNNNNNNNYYYYYY",
//  "NNNNNNNNNNNYYYYY",
//  "NNNNNNNNNNNNYYYY",
//  "NNNNNNNNNNNNNYYY",
//  "NNNNNNNNNNNNNNYY",
//  "NNNNNNNNNNNNNNNY",
//  "NNNNNNNNNNNNNNNN"}
// 
// Returns: {20922789888000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
// 
// Player 0 wins no matter how the positions are assigned, so the answer is 16! = 20922789888000.
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
