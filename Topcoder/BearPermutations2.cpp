#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;

LL dp[105][105];
class BearPermutations2 {
public:

	LL fun(int n,int r,int MOD){
		if(dp[n][r]!=-1)
			return dp[n][r];
		if(n==r || r==0)
			return 1LL;
		else{
			 dp[n][r] = ((fun(n-1,r,MOD) + fun(n-1,r-1,MOD))%MOD);
			return dp[n][r];
		}
	}
	int getSum(int N, int MOD) {
		memset(dp,-1,sizeof dp);
		LL Ans[105];
		Ans[0] = 0LL;
		Ans[1] = Ans[2]= 0LL;
		Ans[3] = 4;
		LL fact[106];
		fact[0] = 1;
		for(int i=0;i<106;i++){
			fact[i] = (fact[i-1]*i)%MOD;
		}

		for(int i=4;i<=N;i++){
				Ans[i] = (2*Ans[i-1])%MOD;

				for(int j=1;j<=N-2;j++){
					int L = j;
					int R = N-j-1;
					/*LL S=0LL;
					for(int k=2;k<=L+1;k++){
						for(int p=k;p<=k-1+R;p++){
							S += p;
						}
					}*/
					//S%=MOD;
					Ans[i] += (fun(N-1,L,MOD)*(((fact[L-1]*fact[R])%MOD)%MOD*(((L+2)*(L+1))/2)%MOD)%MOD)%MOD;
					//Ans[i]%=MOD;
				}
		}
		return Ans[N]%MOD;	
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	BearPermutations2 *obj;
	int answer;
	obj = new BearPermutations2();
	clock_t startTime = clock();
	answer = obj->getSum(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 502739849;
	p2 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 1000003;
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 4;
	p1 = 973412327;
	p2 = 38;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 100;
	p1 = 89;
	p2 = 49;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Bear Limak loves algorithms and tolerates data structures.
// Today he learned about the Cartesian tree.
// You can find a detailed description of this tree at https://en.wikipedia.org/wiki/Cartesian_tree.
// Below we give a shorter description that is sufficient to solve this problem.
// 
// Let A be a sequence of distinct numbers.
// Each such sequence defines a unique Cartesian tree.
// The Cartesian tree is determined by the following rules:
// 
// The Cartesian tree is a rooted binary tree.
// The nodes of the tree correspond to the elements of A.
// An in-order traversal of the tree prints the sequence A.
// The tree is a heap.
// 
// 
// A more detailed explanation of the third rule:
// Consider any node in the tree, and let x be the number in this node.
// All numbers in the left subtree must appear in A before x, and all numbers in the right subtree must appear in A after x.
// 
// A more detailed explanation of the fourth rule:
// For each node, the number in the node must be strictly smaller than each of the numbers in the children of this node.
// 
// Below is a figure that shows the Cartesian tree determined by the sequence A = {9,3,7,1,8,12,10,20,15,18,5}.
// 
// 
// 
// We will now define the score of a Cartesian tree.
// Let T be the Cartesian tree determined by the sequence A.
// In the tree T there are some nodes that have two children.
// For each such node, look at the numbers in those two children, find the indices of those two numbers in A, and compute their (positive) difference.
// The score of the tree T is the sum of all these differences.
// 
// For example, in the above tree we have four nodes that have two children each: the nodes with numbers 1, 3, 10, and 15.
// The children of node 1 are the nodes 3 and 5.
// In the original sequence A, the values 3 and 5 have (0-based) indices 1 and 10.
// The difference between these indices is 10 - 1 = 9.
// For the other three nodes with two children, the differences between their indices are 2, 3, and 2.
// Hence, the score of this tree is 9 + 2 + 3 + 2 = 16.
// 
// You are given the ints N and MOD.
// There are N! permutations of the numbers 1 through N.
// Each of these permutations determines a Cartesian tree.
// Let X be the sum of the scores of these N! trees.
// Compute and return the value (X modulo MOD).
// 
// DEFINITION
// Class:BearPermutations2
// Method:getSum
// Parameters:int, int
// Returns:int
// Method signature:int getSum(int N, int MOD)
// 
// 
// CONSTRAINTS
// -N will be between 1 and 100, inclusive.
// -MOD will be between 3 and 10^9, inclusive.
// -MOD will be prime.
// 
// 
// EXAMPLES
// 
// 0)
// 3
// 502739849
// 
// Returns: 4
// 
// For N=3 there are 3! = 6 distinct permutations.
// Four of these produce Cartesian trees with score 0.
// The remaining two are the permutations (2,1,3) and (3,1,2).
// Each of these produces a Cartesian tree with score 2.
// Hence, the sum of all six scores is 0+0+0+0+2+2 = 4.
// 
// 1)
// 1
// 1000003
// 
// Returns: 0
// 
// 
// 
// 2)
// 4
// 973412327
// 
// Returns: 38
// 
// 
// 
// 3)
// 100
// 89
// 
// Returns: 49
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
