#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;


class FallingSand {
public:
	vector <string> simulate(vector <string> board) {
    int i,j,n,m,k;
    n = board.size();
    m =  board[0].length();
    for(i=n-1;i>=0;i--){
      for(j=0;j<m;j++){
        if(board[i][j]=='o'){
          int f= 0;
          for(k=i+1;k<n;k++){
            if(board[i][j]=='.')continue;
            else{
              board[i][j] = '.';
              board[k-1][j] =  'o';
              f =1;
              break;
            }
          }
          if(f==0)board[i][j]='.',board[n-1][j]='o';
        }
      }
    }
  return board;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	FallingSand *obj;
	vector <string> answer;
	obj = new FallingSand();
	clock_t startTime = clock();
	answer = obj->simulate(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"ooooo","..x..","....x",".....","....o"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"..o..","..x.o","....x",".....","oo.oo"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"..o..","..x.o","....x",".....","oo.oo"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"..o..","..x.o","....x",".....","oo.oo"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"ooooxooo.ooxo.oxoxoooox.....x.oo"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"ooooxooo.ooxo.oxoxoooox.....x.oo"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"o",".","o",".","o",".","."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {".",".",".",".","o","o","o"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"oxxxxooo","xooooxxx","..xx.ooo","oooox.o.","..x....."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"oxxxxooo","x.oo.xxx","..xxo...",".oo.x.o.","ooxo.ooo"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"..o..o..o..o..o..o..o..o..o..o..o","o..o..o..o..o..o..o..o..o..o..o..",".o..o..o..o..o..o..o..o..o..o..o.","...xxx...xxx...xxxxxxxxx...xxx...","...xxx...xxx...xxxxxxxxx...xxx...","...xxx...xxx......xxx......xxx...","...xxxxxxxxx......xxx......xxx...","...xxxxxxxxx......xxx......xxx...","...xxxxxxxxx......xxx......xxx...","...xxx...xxx......xxx............","...xxx...xxx...xxxxxxxxx...xxx...","...xxx...xxx...xxxxxxxxx...xxx...","..o..o..o..o..o..o..o..o..o..o..o","o..o..o..o..o..o..o..o..o..o..o..",".o..o..o..o..o..o..o..o..o..o..o."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {".................................",".................................","...ooo...ooo...ooooooooo...ooo...","...xxx...xxx...xxxxxxxxx...xxx...","...xxx...xxx...xxxxxxxxx...xxx...","...xxxoooxxx......xxx......xxx...","...xxxxxxxxx......xxx......xxx...","...xxxxxxxxx......xxx......xxx...","...xxxxxxxxx......xxx......xxx...","...xxx...xxx......xxx............","...xxx...xxx...xxxxxxxxx...xxx...","...xxx...xxx...xxxxxxxxx...xxx...",".................................","ooo.........ooo.........ooo...ooo","ooooooooooooooooooooooooooooooooo"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// You have a rectangular board that is placed vertically.
// The board is divided into a grid of unit square cells.
// Some grid cells contain obstacles and some cells contain a grain of sand.
// All other cells are currently empty.
// 
// 
// 
// You are given the description of the board as a String[] board.
// The elements of board correspond to rows of the grid in the order from top to bottom.
// (E.g., board[0] represents the topmost row of cells.)
// Each character in each element of board represents one cell.
// The character 'x' represents a cell with an obstacle, 'o' is a grain of sand, and '.' (period) is an empty cell.
// 
// 
// 
// You would like to implement a simulation of falling sand.
// The rules are as follows:
// 
// The obstacles don't move.
// Whenever there is an empty cell immediately below a grain of sand, the grain of sand moves into the empty cell.
// 
// 
// 
// 
// Return the final configuration of the board after all grains of sand reach their final locations.
// 
// 
// DEFINITION
// Class:FallingSand
// Method:simulate
// Parameters:vector <string>
// Returns:vector <string>
// Method signature:vector <string> simulate(vector <string> board)
// 
// 
// CONSTRAINTS
// -board will contain between 1 and 50 elements, inclusive.
// -Each element of board will have length between 1 and 50, inclusive.
// -All elements of board will have the same length.
// -Each character in each element of board will be one of 'x', 'o', and '.'.
// 
// 
// EXAMPLES
// 
// 0)
// {"ooooo",
//  "..x..",
//  "....x",
//  ".....",
//  "....o"}
// 
// Returns: {"..o..", "..x.o", "....x", ".....", "oo.oo" }
// 
// 
// The return value is:
// 
// 
// 
// {"..o..", 
//  "..x.o", 
//  "....x", 
//  ".....", 
//  "oo.oo" }
// 
// 
// 1)
// {"..o..", 
//  "..x.o", 
//  "....x", 
//  ".....", 
//  "oo.oo" }
// 
// Returns: {"..o..", "..x.o", "....x", ".....", "oo.oo" }
// 
// 
// 
// 2)
// {"ooooxooo.ooxo.oxoxoooox.....x.oo"}
// 
// Returns: {"ooooxooo.ooxo.oxoxoooox.....x.oo" }
// 
// Nothing changes in this case, since all the sand is already at the bottom of the grid. 
// 
// 3)
// {"o",
//  ".",
//  "o",
//  ".",
//  "o",
//  ".",
//  "."}
// 
// Returns: {".", ".", ".", ".", "o", "o", "o" }
// 
// 
// 
// 4)
// {"oxxxxooo",
//  "xooooxxx",
//  "..xx.ooo",
//  "oooox.o.",
//  "..x....."}
// 
// Returns: {"oxxxxooo", "x.oo.xxx", "..xxo...", ".oo.x.o.", "ooxo.ooo" }
// 
// 
// Note the final configuration of sand in the second column from the right.
// 
// 
// 
// {"oxxxxooo", 
//  "x.oo.xxx", 
//  "..xxo...", 
//  ".oo.x.o.", 
//  "ooxo.ooo"}
// 
// 
// 5)
// {"..o..o..o..o..o..o..o..o..o..o..o",
//  "o..o..o..o..o..o..o..o..o..o..o..",
//  ".o..o..o..o..o..o..o..o..o..o..o.",
//  "...xxx...xxx...xxxxxxxxx...xxx...",
//  "...xxx...xxx...xxxxxxxxx...xxx...",
//  "...xxx...xxx......xxx......xxx...",
//  "...xxxxxxxxx......xxx......xxx...",
//  "...xxxxxxxxx......xxx......xxx...",
//  "...xxxxxxxxx......xxx......xxx...",
//  "...xxx...xxx......xxx............",
//  "...xxx...xxx...xxxxxxxxx...xxx...",
//  "...xxx...xxx...xxxxxxxxx...xxx...",
//  "..o..o..o..o..o..o..o..o..o..o..o",
//  "o..o..o..o..o..o..o..o..o..o..o..",
//  ".o..o..o..o..o..o..o..o..o..o..o."}
// 
// Returns: {".................................", ".................................", "...ooo...ooo...ooooooooo...ooo...", "...xxx...xxx...xxxxxxxxx...xxx...", "...xxx...xxx...xxxxxxxxx...xxx...", "...xxxoooxxx......xxx......xxx...", "...xxxxxxxxx......xxx......xxx...", "...xxxxxxxxx......xxx......xxx...", "...xxxxxxxxx......xxx......xxx...", "...xxx...xxx......xxx............", "...xxx...xxx...xxxxxxxxx...xxx...", "...xxx...xxx...xxxxxxxxx...xxx...", ".................................", "ooo.........ooo.........ooo...ooo", "ooooooooooooooooooooooooooooooooo" }
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
