#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;


class PaperAndPaintEasy {
public:
	long long computeArea(int width, int height, int xfold, int cnt, int x1, int y1, int x2, int y2) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, bool hasAnswer, long long p8) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4 << "," << p5 << "," << p6 << "," << p7;
	cout << "]" << endl;
	PaperAndPaintEasy *obj;
	long long answer;
	obj = new PaperAndPaintEasy();
	clock_t startTime = clock();
	answer = obj->computeArea(p0, p1, p2, p3, p4, p5, p6, p7);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p8 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p8;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	int p5;
	int p6;
	int p7;
	long long p8;
	
	{
	// ----- test 0 -----
	p0 = 5;
	p1 = 6;
	p2 = 2;
	p3 = 2;
	p4 = 1;
	p5 = 1;
	p6 = 3;
	p7 = 2;
	p8 = 21ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 13;
	p2 = 1;
	p3 = 0;
	p4 = 1;
	p5 = 8;
	p6 = 2;
	p7 = 12;
	p8 = 35ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 12;
	p1 = 12;
	p2 = 7;
	p3 = 3;
	p4 = 3;
	p5 = 1;
	p6 = 6;
	p7 = 2;
	p8 = 124ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 4;
	p1 = 5;
	p2 = 4;
	p3 = 0;
	p4 = 0;
	p5 = 0;
	p6 = 1;
	p7 = 1;
	p8 = 19ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 4;
	p1 = 8;
	p2 = 4;
	p3 = 3;
	p4 = 0;
	p5 = 1;
	p6 = 2;
	p7 = 2;
	p8 = 24ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 4;
	p1 = 8;
	p2 = 3;
	p3 = 0;
	p4 = 1;
	p5 = 1;
	p6 = 3;
	p7 = 2;
	p8 = 30ll;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Onise likes to play with paper and paint.  He has a piece of paper with dimensions width x height.  He does the following steps with the paper:
// 
// 
// Fold the paper along the line x = xfold (the left side of the paper is folded over the right side).
// Divide the paper vertically into cnt+1 equal sections.  Then, cnt times, take the topmost section and fold it over the section below it.
// Paint a rectangle with the lower-left corner at (x1, y1) and the upper-right corner at (x2, y2).  Note that (0, 0) is now the lower-left corner of the paper in its current folded state, not its original state.  The paint will seep through all the layers of the folded paper.  See the image below for clarification.
// Unfold the paper.
// 
// 
// For example, let's say Onise has a piece of paper that is 5 x 6.  He performs the described steps where xfold is 2, cnt is 2, and the coordinates of the painted rectangle's corners are (1, 1) and (3, 2).  The following will happen (note that the paper starts out blue in the images and gets painted white):
// 
//  
//  
//  
//  
//  
// 
// 
// You are given ints width and height, and ints xfold, cnt, x1, y1, x2 and y2.  Return the total area of of the paper that is not covered in paint after Onise is done.
// 
// DEFINITION
// Class:PaperAndPaintEasy
// Method:computeArea
// Parameters:int, int, int, int, int, int, int, int
// Returns:long long
// Method signature:long long computeArea(int width, int height, int xfold, int cnt, int x1, int y1, int x2, int y2)
// 
// 
// CONSTRAINTS
// -width and height will be between 1 and 10^9, inclusive.
// -xfold will be between 0 and width, inclusive.
// -cnt will be between 0 and 1000, inclusive.
// -cnt+1 will be a divisor of height.
// -0 <= x1 < x2 <= max(xfold, width-xfold) and 0 <= y1 < y2 <= height/(cnt+1).
// 
// 
// EXAMPLES
// 
// 0)
// 5
// 6
// 2
// 2
// 1
// 1
// 3
// 2
// 
// Returns: 21
// 
// The example from the problem statement.
// 
// 1)
// 3
// 13
// 1
// 0
// 1
// 8
// 2
// 12
// 
// Returns: 35
// 
// 2)
// 12
// 12
// 7
// 3
// 3
// 1
// 6
// 2
// 
// Returns: 124
// 
// 3)
// 4
// 5
// 4
// 0
// 0
// 0
// 1
// 1
// 
// Returns: 19
// 
// 4)
// 4
// 8
// 4
// 3
// 0
// 1
// 2
// 2
// 
// Returns: 24
// 
// 5)
// 4
// 8
// 3
// 0
// 1
// 1
// 3
// 2
// 
// Returns: 30
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
