#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;


class ProblemSetsEasy {
public:
	int maxSets(int E, int EM, int M, int MH, int H) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, bool hasAnswer, int p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
	cout << "]" << endl;
	ProblemSetsEasy *obj;
	int answer;
	obj = new ProblemSetsEasy();
	clock_t startTime = clock();
	answer = obj->maxSets(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	int p5;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 2;
	p2 = 1;
	p3 = 2;
	p4 = 2;
	p5 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 100;
	p1 = 100;
	p2 = 100;
	p3 = 0;
	p4 = 0;
	p5 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 657;
	p1 = 657;
	p2 = 657;
	p3 = 657;
	p4 = 657;
	p5 = 1095;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1;
	p1 = 2;
	p2 = 3;
	p3 = 4;
	p4 = 5;
	p5 = 3;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 100000;
	p1 = 100000;
	p2 = 100000;
	p3 = 100000;
	p4 = 100000;
	p5 = 166666;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Cat Snuke came up with some problems. He wants to construct as many problem sets as possible using those problems.
// 
// Each problem set must contain exactly three problems: one for the Easy slot, one for the Medium slot, and one for the Hard slot. Each problem can only be assigned to a single slot in a single problem set. He came up with E + EM + M + MH + H problems in total. The distribution of the problems is as follows:
// 
// 
// E problems can only be used in the Easy slot.
// EM problems can be used either in the Easy slot or the Medium slot.
// M problems can only be used in the Medium slot.
// MH problems can be used either in the Medium slot or the Hard slot.
// H problems can only be used in the Hard slot.
// 
// 
// Return the maximal number of problem sets he can construct.
// 
// DEFINITION
// Class:ProblemSetsEasy
// Method:maxSets
// Parameters:int, int, int, int, int
// Returns:int
// Method signature:int maxSets(int E, int EM, int M, int MH, int H)
// 
// 
// CONSTRAINTS
// -E, EM, M, MH, H must be between 0 and 100000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 2
// 1
// 2
// 2
// 
// Returns: 3
// 
// One of EM problems should be used for the Easy slot, and the other should be used for the Medium slot.
// One of MH problems should be used for the Medium slot, and the other should be used for the Hard slot.
// 
// 1)
// 100
// 100
// 100
// 0
// 0
// 
// Returns: 0
// 
// Unfortunately, no problem can be used for the Hard slot.
// 
// 2)
// 657
// 657
// 657
// 657
// 657
// 
// Returns: 1095
// 
// 
// 
// 3)
// 1
// 2
// 3
// 4
// 5
// 
// Returns: 3
// 
// 
// 
// 4)
// 100000
// 100000
// 100000
// 100000
// 100000
// 
// Returns: 166666
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
