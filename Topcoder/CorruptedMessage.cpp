#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include<bits/stdc++.h>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;

int a[26];
class CorruptedMessage {
public:
	string reconstructMessage(string s, int k) { 
		int i,n,j;
		n = s.length();
		memset(a,0,sizeof(a));
		for(i=0;i<n;i++){
			a[s[i]-'a']++;
		}
		for(i=0;i<26;i++){
		//	cout << a[i] << endl;
			if(a[i]==n-k){
				string s1="";
				for(j=0;j<n;j++){
					s1+=(char)('a'+i);
			//		cout << s1 << endl;
				}
				return s1;
			}
		}
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
	cout << "]" << endl;
	CorruptedMessage *obj;
	string answer;
	obj = new CorruptedMessage();
	clock_t startTime = clock();
	answer = obj->reconstructMessage(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "hello";
	p1 = 3;
	p2 = "lllll";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "abc";
	p1 = 3;
	p2 = "ddd";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "wwwwwwwwwwwwwwwwww";
	p1 = 0;
	p2 = "wwwwwwwwwwwwwwwwww";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "ababba";
	p1 = 3;
	p2 = "aaaaaa";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "zoztxtoxytyt";
	p1 = 10;
	p2 = "oooooooooooo";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "jlmnmiunaxzywed";
	p1 = 13;
	p2 = "mmmmmmmmmmmmmmm";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Your friend just sent you a message.
// The message consisted of one or more copies of the same lowercase letter.
// For example, "aaaaa" and "xxxxxxxxx" are valid messages.
// Unfortunately, on its way to you the message became corrupted: exactly k letters of the original message were changed to some other letters.
// The message you received is s.
// 
// 
// 
// Given the string s and the int k, reconstruct the original message.
// More precisely, return a string that could have been the original message.
// It is guaranteed that at least one such string will always exist.
// If there are multiple possible answers, you may return any of them.
// 
// 
// DEFINITION
// Class:CorruptedMessage
// Method:reconstructMessage
// Parameters:string, int
// Returns:string
// Method signature:string reconstructMessage(string s, int k)
// 
// 
// CONSTRAINTS
// -The number of characters in s will be between 1 and 50, inclusive.
// -Each character in s will be a lowercase letter ('a'-'z').
// -k will be between 0 and the length of s, inclusive.
// -At least one possible original message will be consistent with s and k.
// 
// 
// EXAMPLES
// 
// 0)
// "hello"
// 3
// 
// Returns: "lllll"
// 
// The three corrupted characters have 0-based indices 0, 1, and 4.
// 
// 1)
// "abc"
// 3
// 
// Returns: "ddd"
// 
// The original message can't be "aaa", "bbb", or "ccc", since we need to change exactly 3 characters.
// 
// Some other possible answers include "qqq", "xxx", or "ppp".
// 
// 2)
// "wwwwwwwwwwwwwwwwww"
// 0
// 
// Returns: "wwwwwwwwwwwwwwwwww"
// 
// No characters were corrupted.
// 
// 3)
// "ababba"
// 3
// 
// Returns: "aaaaaa"
// 
// "bbbbbb" will also be accepted.
// 
// 4)
// "zoztxtoxytyt"
// 10
// 
// Returns: "oooooooooooo"
// 
// 
// 
// 5)
// "jlmnmiunaxzywed"
// 13
// 
// Returns: "mmmmmmmmmmmmmmm"
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
