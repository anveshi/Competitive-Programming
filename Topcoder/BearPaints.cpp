#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class BearPaints {
public:
	long long maxArea(int W, int H, long long M) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, long long p2, bool hasAnswer, long long p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	BearPaints *obj;
	long long answer;
	obj = new BearPaints();
	clock_t startTime = clock();
	answer = obj->maxArea(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	long long p2;
	long long p3;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 5;
	p2 = 14ll;
	p3 = 12ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	p1 = 4;
	p2 = 10ll;
	p3 = 9ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1000000;
	p1 = 12345;
	p2 = 1000000000000ll;
	p3 = 12345000000ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1000000;
	p1 = 1000000;
	p2 = 720000000007ll;
	p3 = 720000000000ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 1000000;
	p1 = 1000000;
	p2 = 999999999999ll;
	p3 = 999999000000ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Limak is a little polar bear.
// Today he found two things in the snow: a bucket of blue paint and a white rectangular grid with W times H square cells.
// 
// Limak is going to paint some (possibly even all) cells blue.
// He wants to do it in such a way that the blue cells will form a completely filled blue rectangle.
// He has enough paint for M cells.
// What is the largest possible area of a blue rectangle he can paint?
// 
// DEFINITION
// Class:BearPaints
// Method:maxArea
// Parameters:int, int, long long
// Returns:long long
// Method signature:long long maxArea(int W, int H, long long M)
// 
// 
// CONSTRAINTS
// -W and H will be between 1 and 10^6, inclusive.
// -M will be between 1 and 10^12, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 3
// 5
// 14
// 
// Returns: 12
// 
// Limak has a grid that is W = 3 cells wide and H = 5 cells tall.
// He doesn't have enough paint to color all 15 cells.
// He also cannot color just 14 or 13 cells in a way that would produce a blue rectangle.
// The best he can do is to color four consecutive rows blue.
// This will produce a blue rectangle.
// Its area is 12 squares.
// 
// 1)
// 4
// 4
// 10
// 
// Returns: 9
// 
// Here the best solution is to paint a rectangle of size 3 times 3 blue.
// (A square is a valid rectangle.)
// 
// 2)
// 1000000
// 12345
// 1000000000000
// 
// Returns: 12345000000
// 
// Limak has more than enough paint to make whole grid blue.
// 
// 3)
// 1000000
// 1000000
// 720000000007
// 
// Returns: 720000000000
// 
// Limak's grid is a square with side 10^6.
// Limak can paint a rectangle of size 800,000 times 900,000.
// 
// 4)
// 1000000
// 1000000
// 999999999999
// 
// Returns: 999999000000
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
