#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;


class NoRightTurnDiv2 {
public:
	vector <int> findPath(vector <int> x, vector <int> y) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, vector <int> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	NoRightTurnDiv2 *obj;
	vector <int> answer;
	obj = new NoRightTurnDiv2();
	clock_t startTime = clock();
	answer = obj->findPath(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	
	{
	// ----- test 0 -----
	int t0[] = {-10,0,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {10,-10,10};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,1,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,0,-3,-3,3,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {-1,1,-3,3,-3,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,4,5,3,2,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {10,9,8,7,6,5,4,3,2,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,4,9,16,25,36,49,64,81,100};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {9,8,7,6,5,4,3,2,1,0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {0,2,-2,4,-4,2,-2,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,2,4,4,6,6,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {4,2,0,1,3,5,6,7};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {-76,98,83,58,-15,94,21,55,80,84,-39,-90,-46,100,-80,-49,-2,-70,36,48,88,10,55,-56,22,67,31,81,100,-39,64,-62,-7,45,-82,-24,51,-33,53,11,20,-74,-83,47,9,39,42,63,-97,94};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {-90,68,91,-92,-6,88,99,10,39,-69,-61,-4,71,-5,90,-51,21,-53,-21,-86,41,-9,42,-23,-4,12,94,-59,55,18,70,-88,-86,-17,-97,-33,87,80,91,-80,-79,-79,-78,-99,57,67,-52,-46,61,-10};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {39,32,40,31,19,27,47,46,0,34,43,3,9,13,28,1,5,2,6,14,48,42,41,49,20,38,26,37,12,11,17,10,33,25,8,30,36,44,29,23,15,18,7,22,45,16,4,35,24,21};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Roger the Robot has been sent to explore a planet. 
// The surface of the planet can be thought of as a two-dimensional plane. 
// You are given two vector <int>s x and y.
// The planet has N interesting points described by these vector <int>s.
// The i-th interesting point has coordinates (x[i], y[i]).
// No three interesting points will be collinear.
// 
// 
// 
// Roger will choose a permutation of {0,1,...,N-1}, and will visit the points in that order.
// Roger will travel in a straight line in between points. There are two conditions he must follow:
// 
// He must never cross his own path (that is, if we look at the line segments formed by the path, no two segments strictly intersect). 
//  Due to rather unfortunate oversight, Roger is incapable of making any right turns. This means that for any three consecutive points that he visits, these three points constitute a counter-clockwise orientation. 
// 
// 
// 
// 
// Your job is to find a path that Roger can take.
// If there is no valid path, return an empty vector <int>.
// Otherwise, return an vector <int> containing a permutation of 0,...,N-1, representing a valid path that Roger can take.
// 
// 
// 
// 
// DEFINITION
// Class:NoRightTurnDiv2
// Method:findPath
// Parameters:vector <int>, vector <int>
// Returns:vector <int>
// Method signature:vector <int> findPath(vector <int> x, vector <int> y)
// 
// 
// CONSTRAINTS
// -x will contain between 2 and 50 elements, inclusive.
// -y will contain exactly the same number of elements as x.
// -Each element of x,y will be between -1,000 and 1,000, inclusive.
// -All pairs (x[i], y[i]) will be distinct.
// -No three points will be collinear.
// 
// 
// EXAMPLES
// 
// 0)
// {-10, 0, 10}
// {10, -10, 10}
// 
// Returns: {0, 1, 2 }
// 
// The points form a triangle.
// Any of the following return values will be accepted: {0,1,2},{1,2,0},{2,0,1}
// 
// 1)
// {0,0,-3,-3,3,3}
// {-1,1,-3,3,-3,3}
// 
// Returns: {0, 4, 5, 3, 2, 1 }
// 
// 
// Here is a picture of the points:
// 
// 
// 
// 
// 
// 
// 
// Here is an example of a different valid solution. This would correspond to a return value of {1,5,3,2,4,0}
// 
// 
// 
// 
// 
// 
// 2)
// {10,9,8,7,6,5,4,3,2,1}
// {1,4,9,16,25,36,49,64,81,100}
// 
// Returns: {9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
// 
// 
// 
// 3)
// {0, 2,-2, 4,-4, 2,-2, 0}
// {1, 2, 2, 4, 4, 6, 6, 5}
// 
// Returns: {4, 2, 0, 1, 3, 5, 6, 7 }
// 
// 
// 
// 4)
// {-76,98,83,58,-15,94,21,55,80,84,-39,-90,-46,100,-80,-49,-2,-70,36,48,88,10,
// 55,-56,22,67,31,81,100,-39,64,-62,-7,45,-82,-24,51,-33,53,11,20,-74,-83,47,
// 9,39,42,63,-97,94}
// {-90,68,91,-92,-6,88,99,10,39,-69,-61,-4,71,-5,90,-51,21,-53,-21,-86,41,-9,
// 42,-23,-4,12,94,-59,55,18,70,-88,-86,-17,-97,-33,87,80,91,-80,-79,-79,-78,
// -99,57,67,-52,-46,61,-10}
// 
// Returns: {39, 32, 40, 31, 19, 27, 47, 46, 0, 34, 43, 3, 9, 13, 28, 1, 5, 2, 6, 14, 48, 42, 41, 49, 20, 38, 26, 37, 12, 11, 17, 10, 33, 25, 8, 30, 36, 44, 29, 23, 15, 18, 7, 22, 45, 16, 4, 35, 24, 21 }
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
