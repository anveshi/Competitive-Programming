#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class TopBiologist {
public:
	string t = "ATGC";
	string findShortestNewSequence(string sequence) {
		queue <string> S;
		for(int i=0;i<4;i++){
			S.push(t.substr(i, 1));
		}
		while(!S.empty()){
			string s = S.front();
			S.pop();
			if(sequence.find(s) == string::npos)
				return s;
			for(int i=0;i<4;i++){
				S.push(s+t[i]);
			}
		}
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	TopBiologist *obj;
	string answer;
	obj = new TopBiologist();
	clock_t startTime = clock();
	answer = obj->findShortestNewSequence(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "AGGTCTA";
	p1 = "AC";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "AGACGACGGAGAACGA";
	p1 = "T";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "A";
	p1 = "C";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "AAGATACACCGGCTTCGTG";
	p1 = "CAT";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// For the purposes of this problem, a DNA sequence is a string consisting of the letters A, C, G, and T.
// 
// You have been hired to help researchers at TopBiologist uncover the secrets of the human genome. The researchers have identified a DNA sequence, which is given to you in the string sequence. They have asked you to write a program which finds the shortest DNA sequence that is not contained in sequence.
// 
// For example, if sequence is the string "AGGTCTA", then one possible answer would be the string "AC". Other solutions, such as "CC", would also be accepted. "AG" would be an invalid answer because "AG" is contained in sequence. "AAA" would also be invalid: although it isn't contained in sequence, it is 3 characters long, and there are better answers which are only 2 characters long.
// 
// You are not really sure how this could possibly help anyone's research, but it's not your job to question TopBiologist. Find and return the shortest DNA sequence which is not contained in sequence. If there are multiple possible answers, you may return any of them.
// 
// DEFINITION
// Class:TopBiologist
// Method:findShortestNewSequence
// Parameters:string
// Returns:string
// Method signature:string findShortestNewSequence(string sequence)
// 
// 
// NOTES
// -Formally, we say that sequence X is contained in sequence Y if we can obtain X by erasing some (possibly none) elements from the beginning and from the end of Y. For example, "AB" is contained in "ABC", but "AC" is not contained in "ABC".
// 
// 
// CONSTRAINTS
// -sequence will contain between 1 and 2000 characters, inclusive.
// -Each character of sequence will be A, C, G, or T.
// 
// 
// EXAMPLES
// 
// 0)
// "AGGTCTA"
// 
// Returns: "AC"
// 
// This is the example from the problem statement. Any of the following answers will be accepted: "AA", "AC", "AT", "CA", "CC", "CG", "GA", "GC", "TG", and "TT".
// 
// 1)
// "AGACGACGGAGAACGA"
// 
// Returns: "T"
// 
// 
// 
// 2)
// "A"
// 
// Returns: "C"
// 
// 
// 
// 3)
// "AAGATACACCGGCTTCGTG"
// 
// Returns: "CAT"
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
