#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class WalkOverATree {
public:
	int maxNodesVisited(vector <int> parent, int L) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	WalkOverATree *obj;
	int answer;
	obj = new WalkOverATree();
	clock_t startTime = clock();
	answer = obj->maxNodesVisited(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0,1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 3;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {0,0,0,0,2,4,2,3,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 2;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {0,0,1,2,3,2,3,1,3,0,1,8,6,8,0,5,15,0,9};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = 5;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {0,0,0,1,1,3,5,1,4,5,2,2,10,5,10,10,11,13,8,3,18,15,20,20,23,8,11,26,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 26;
	p2 = 17;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	int t0[] = {0,0,2,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100;
	p2 = 5;
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	int t0[] = {0,0,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = 4;
	all_right = KawigiEdit_RunTest(7, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Given is a tree on n nodes.
// The nodes are numbered 0 through n-1.
// You are given the description of the tree as a vector <int> parent with n-1 elements.
// For each valid i, there is an edge between vertices (i+1) and parent[i].
// 
// 
// 
// 
// 
// A person is currently standing in node 0.
// In a single step, the person can move from its current node to any adjacent node.
// You are given an int L.
// The person is allowed to make at most L steps.
// 
// 
// 
// 
// 
// Return the maximum number of nodes the person can visit during the walk.
// Node 0 (where the walk starts) and the node where the walk ends count as visited.
// Each visited node is only counted once, even if it is visited multiple times.
// 
// 
// DEFINITION
// Class:WalkOverATree
// Method:maxNodesVisited
// Parameters:vector <int>, int
// Returns:int
// Method signature:int maxNodesVisited(vector <int> parent, int L)
// 
// 
// CONSTRAINTS
// -parent will contain between 0 and 49 elements, inclusive.
// -For each i, parent[i] will be between 0 and i, inclusive.
// -L will be between 1 and 100, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {0, 0}
// 2
// 
// Returns: 2
// 
// The tree consists of edges 1-0 and 2-0.
// Our person will start in node 0 and can make at most L=2 steps.
// In two steps, the best we can do is visit one of the nodes 1 and 2.
// 
// 1)
// {0, 0}
// 3
// 
// Returns: 3
// 
// This is the same tree, only now we have L=3.
// In three steps the person can visit all three nodes: for example, by going from node 0 to node 1, back to node 0, and finally to node 2.
// Note that even though the person visited node 0 twice, we only count it once.
// 
// 2)
// {0, 1, 2, 3}
// 2
// 
// Returns: 3
// 
// 
// 
// 3)
// {0,0,0,0,2,4,2,3,1}
// 1
// 
// Returns: 2
// 
// 
// 
// 4)
// {0,0,1,2,3,2,3,1,3,0,1,8,6,8,0,5,15,0,9}
// 4
// 
// Returns: 5
// 
// 
// 
// 5)
// {0,0,0,1,1,3,5,1,4,5,2,2,10,5,10,10,11,13,8,3,18,15,20,20,23,8,11,26,4}
// 26
// 
// Returns: 17
// 
// 
// 
// 6)
// {0, 0, 2, 0}
// 
// 100
// 
// Returns: 5
// 
// As the tree is very small and L large, the person can easily visit all nodes.
// 
// 7)
// {0, 0, 2}
// 4
// 
// Returns: 4
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
