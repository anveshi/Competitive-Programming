#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;


class DevuAndBeautifulSubstrings {
public:
	long long countBeautifulSubstrings(int n, int cnt) {

		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	DevuAndBeautifulSubstrings *obj;
	long long answer;
	obj = new DevuAndBeautifulSubstrings();
	clock_t startTime = clock();
	answer = obj->countBeautifulSubstrings(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	long long p2;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 2;
	p2 = 2ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 1;
	p2 = 0ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 4;
	p2 = 4ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 15;
	p1 = 35;
	p2 = 642ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 40;
	p1 = 820;
	p2 = 2ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 50;
	p1 = 94;
	p2 = 32357325751902ll;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Devu likes to play with binary strings: strings in which each character is either '0' or '1'.
// 
// 
// 
// 
// 
// Devu calls a binary string beautiful if it is nonempty and no two consecutive characters in the string are equal..
// The beauty level of a binary string is the number of beautiful substrings it contains.
// For example, the beauty level of "0001" is 5.
// This string contains four beautiful substrings of length 1 and one beautiful substring of length 2.
// 
// 
// 
// 
// 
// You are given ints n and cnt.
// Return the number of binary strings of length n with beauty level equal to cnt.
// 
// 
// DEFINITION
// Class:DevuAndBeautifulSubstrings
// Method:countBeautifulSubstrings
// Parameters:int, int
// Returns:long long
// Method signature:long long countBeautifulSubstrings(int n, int cnt)
// 
// 
// CONSTRAINTS
// -n will be between 1 and 50, inclusive.  
// -cnt will be between 0 and n * (n + 1) / 2, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 2
// 
// Returns: 2
// 
// There are four binary strings of length 2: "00", "01", "10", and "11".
// Their beauty levels are 2, 3, 3, and 2, respectively.
// Hence, there are two binary strings of length 2 with beauty level 2.
// 
// 1)
// 2
// 1
// 
// Returns: 0
// 
// There is no binary string of length 2 with beauty level 1.
// 
// 2)
// 3
// 4
// 
// Returns: 4
// 
// 
// 
// 3)
// 15
// 35
// 
// Returns: 642
// 
// 
// 
// 4)
// 40
// 820
// 
// Returns: 2
// 
// 
// 
// 5)
// 50
// 94
// 
// Returns: 32357325751902
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
