#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;


class ChessFloor {
public:
	int minimumChanges(vector <string> floor) {
    int n,m;
    n = floor.size();
    m = floor[0].length();
    int cnt[2][27];
    for(int i=0;i<2;i++)for(int j=0;j<27;j++)cnt[i][j]=0;
    for(int i=0;i<n;i++){
      for(int j=0;j<m;j++){
        if((i+j)%2==0)cnt[0][floor[i][j]-'a']++;
        else cnt[1][floor[i][j]-'a']++;
      }
    }
    int ans = n*m;
    int temp =0;
    for(int i=0;i<26;i++){
      for(int j=0;j<26;j++){
        if(i==j)continue;
        temp = max(temp,cnt[0][i]+cnt[1][j]);
      }
    }
    ans -=temp;
    return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ChessFloor *obj;
	int answer;
	obj = new ChessFloor();
	clock_t startTime = clock();
	answer = obj->minimumChanges(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"aba","bbb","aba"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"wbwbwbwb","bwbwbwbw","wbwbwbwb","bwbwbwbw","wbwbwbwb","bwbwbwbw","wbwbwbwb","bwbwbwbw"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"zz","zz"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"helloand","welcomet","osingler","oundmatc","hsixhund","redandsi","xtythree","goodluck"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 56;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"jecjxsengslsmeijrmcx","tcfyhumjcvgkafhhffed","icmgxrlalmhnwwdhqerc","xzrhzbgjgabanfxgabed","fpcooilmwqixfagfojjq","xzrzztidmchxrvrsszii","swnwnrchxujxsknuqdkg","rnvzvcxrukeidojlakcy","kbagitjdrxawtnykrivw","towgkjctgelhpomvywyb","ucgqrhqntqvncargnhhv","mhvwsgvfqgfxktzobetn","fabxcmzbbyblxxmjcaib","wpiwnrdqdixharhjeqwt","xfgulejzvfgvkkuyngdn","kedsalkounuaudmyqggb","gvleogefcsxfkyiraabn","tssjsmhzozbcsqqbebqw","ksbfjoirwlmnoyyqpbvm","phzsdodppzfjjmzocnge"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 376;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Samantha is renovating a square room.
// The floor of the room is an N times N grid of unit square tiles.
// Each tile has some color.
// You are given the current colors of all tiles in a vector <string> floor with N elements, each containing N characters.
// Each character represents one tile.
// Identical characters represent tiles of the same color.
// 
// Samantha wants to be able to play chess or checkers on the floor.
// Hence, she wants to change the entire floor into a checkerboard pattern.
// A checkerboard pattern has two properties:
// 
// there are exactly two distinct colors of tiles
// no two tiles of the same color share a common side
// 
// 
// For example, this is a checkerboard pattern:
// 
// 
// afa
// faf
// afa
// 
// 
// This is not a checkerboard pattern because there are more than two distinct colors:
// 
// 
// aba
// bcb
// aba
// 
// 
// This is not a checkerboard pattern because there are two tiles that share a side and have the same color:
// 
// 
// aaa
// bab
// aba
// 
// 
// Samantha wants to change her floor into a checkerboard pattern by changing the colors of as few tiles as possible.
// Compute and return the number of tiles she needs to change.
// 
// DEFINITION
// Class:ChessFloor
// Method:minimumChanges
// Parameters:vector <string>
// Returns:int
// Method signature:int minimumChanges(vector <string> floor)
// 
// 
// CONSTRAINTS
// -N will be between 2 and 20, inclusive.
// -floor will contain exactly N elements.
// -Each element of floor will consist of exactly N characters.
// -Each character in floor will be a lowercase English letter ('a'-'z').
// 
// 
// EXAMPLES
// 
// 0)
// {"aba",
//  "bbb",
//  "aba"}
// 
// 
// Returns: 1
// 
// This is not a checkerboard pattern, but Samantha can change it into a checkerboard pattern easily.
// All she needs to do is to change the color of the middle tile from 'b' to 'a'.
// The smallest possible number of changes is therefore 1.
// 
// 1)
// {"wbwbwbwb",
//  "bwbwbwbw",
//  "wbwbwbwb",
//  "bwbwbwbw",
//  "wbwbwbwb",
//  "bwbwbwbw",
//  "wbwbwbwb",
//  "bwbwbwbw"}
//  
// 
// Returns: 0
// 
// This floor already has a checkerboard pattern, so no changes are necessary.
// 
// 2)
// {"zz",
//  "zz"}
// 
// Returns: 2
// 
// A checkerboard pattern must contain tiles of two distinct colors.
// 
// 3)
// {"helloand",
//  "welcomet",
//  "osingler",
//  "oundmatc",
//  "hsixhund",
//  "redandsi",
//  "xtythree",
//  "goodluck"}
// 
// Returns: 56
// 
// 
// 
// 4)
// {"jecjxsengslsmeijrmcx",
//  "tcfyhumjcvgkafhhffed",
//  "icmgxrlalmhnwwdhqerc",
//  "xzrhzbgjgabanfxgabed",
//  "fpcooilmwqixfagfojjq",
//  "xzrzztidmchxrvrsszii",
//  "swnwnrchxujxsknuqdkg",
//  "rnvzvcxrukeidojlakcy",
//  "kbagitjdrxawtnykrivw",
//  "towgkjctgelhpomvywyb",
//  "ucgqrhqntqvncargnhhv",
//  "mhvwsgvfqgfxktzobetn",
//  "fabxcmzbbyblxxmjcaib",
//  "wpiwnrdqdixharhjeqwt",
//  "xfgulejzvfgvkkuyngdn",
//  "kedsalkounuaudmyqggb",
//  "gvleogefcsxfkyiraabn",
//  "tssjsmhzozbcsqqbebqw",
//  "ksbfjoirwlmnoyyqpbvm",
//  "phzsdodppzfjjmzocnge"}
// 
// Returns: 376
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
