#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class Alignment {
public:
  int Min(int x,int y,int z){
    return (min(min(x,y),z));
  }
	int align(string A, string B, int x) {
    int Dp[A.length()+1][B.length()+1][3];
    A = '#' + A;
    B = '#' + B;
    for(int i=0;i<A.length();i++){
      for(int j=0;j<B.length();j++){
          for(int k=0;k<3;k++)
            Dp[i][j][k] = 10000000;
      }
    }

    for(int i=0;i<A.length();i++){
      Dp[0][i][0] = ((A[i]==A[0])?0:10000000);
      Dp[0][i][1] = x+x+i;
      Dp[0][i][2] = x+x+i;
      for(int k=0;k<3;k++){
        Dp[i][0][k] = Dp[0][i][k];
      }
    }

    for(int i=1;i<A.length();i++){
      for(int j=1;j<B.length();j++){
        if(A[i] == B[j]){
          Dp[i][j][0] = Min(Dp[i-1][j-1][0], Dp[i-1][j-1][1], Dp[i-1][j-1][2]);
        }
        Dp[i][j][1] = Min(Dp[i-1][j][0]+x+1,Dp[i-1][j][1]+1, Dp[i-1][j][2]+x+1);

        Dp[i][j][2] = Min(Dp[i][j-1][0]+x+1, Dp[i][j-1][2]+1, Dp[i][j-1][1]+x+1); 
      }
    }
    int n = A.length()-1, m = B.length()-1;
    return Min(Dp[n][m][0],Dp[n][m][1], Dp[n][m][2]);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, string p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"" << "," << p2;
	cout << "]" << endl;
	Alignment *obj;
	int answer;
	obj = new Alignment();
	clock_t startTime = clock();
	answer = obj->align(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = "ABC";
	p1 = "ACE";
	p2 = 1;
	p3 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "AAABAAAABAA";
	p1 = "AAAABAABAAA";
	p2 = 1;
	p3 = 7;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "AAABAAAABAA";
	p1 = "AAAABAABAAA";
	p2 = 10;
	p3 = 28;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "AA";
	p1 = "B";
	p2 = 1;
	p3 = 5;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are given two strings: A and B.  You would like to align these two strings by inserting '-' characters in them so that every character in A lines up with the same character in B or with a '-' in B, and vice versa.  Each maximal sequence of consecutive '-' characters costs x, plus an additional 1 per each '-' character.  For example, changing "ABC" to "A-B-C" costs x+1+x+1, while changing it to "A--BC" costs x+2.  Given, A, B, and x return the minimum cost to align the two strings.
// 
// DEFINITION
// Class:Alignment
// Method:align
// Parameters:string, string, int
// Returns:int
// Method signature:int align(string A, string B, int x)
// 
// 
// CONSTRAINTS
// -A and B each contain between 1 and 50 uppercase letters ('A'-'Z'), inclusive.
// -x will be between 0 and 100, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// "ABC"
// "ACE"
// 1
// 
// Returns: 4
// 
// We can line things up as:
// 
// ABC-
// A-CE
// 
// 
// 1)
// "AAABAAAABAA"
// "AAAABAABAAA"
// 1
// 
// Returns: 7
// 
// 
//  AAA-BAAAABAA-
//  AAAABAA--BAAA
// 
// 
// 2)
// "AAABAAAABAA"
// "AAAABAABAAA"
// 10
// 
// Returns: 28
// 
// 
//  AAABAAAABAA----
//  AAA----ABAABAAA
// 
// 
// 3)
// "AA"
// "B"
// 1
// 
// Returns: 5
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
