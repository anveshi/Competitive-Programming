#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class Quipu {
public:
	int readKnots(string knots) {
    int ans = 0,cur=0,n;
    n = knots.length();
    string s = knots;
    for(int i=1;i<n;i++){
      if(s[i-1]==s[i]=='-')
        ans*=10;
      else if(s[i]=='X'){
          cur++;
      }
      else if(s[i]=='-'){
        ans = ans*10 + cur;
        cur =0;
      }
    }
    return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	Quipu *obj;
	int answer;
	obj = new Quipu();
	clock_t startTime = clock();
	answer = obj->readKnots(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "-XX-XXXX-XXX-";
	p1 = 243;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "-XX--XXXX---XXX-";
	p1 = 204003;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "-X-";
	p1 = 1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "-X-------";
	p1 = 1000000;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "-XXXXXXXXX--XXXXXXXXX-XXXXXXXXX-XXXXXXX-XXXXXXXXX-";
	p1 = 909979;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// The Incas used a sophisticated system of record keeping consisting of bundles of knotted cords.
// Such a bundle of cords is called a quipu.  Each individual cord represents a single number.
// Surprisingly, the Incas used a base-10 positional system, just like we do today.  Each digit of a number 
// is represented by a cluster of adjacent knots, with spaces between neighboring clusters.  The digit is 
// determined by the number of knots in the cluster.
// For example, the number 243 would be represented by a cord with knots tied in the following pattern
// 
// 
//      -XX-XXXX-XXX-
// 
// where each uppercase 'X' represents a knot and each '-' represents an unknotted segment of cord (all quotes for clarity only).
// 
// 
// Unlike many ancient civilizations, the Incas were aware of the concept of zero, and used it in their quipus.
// A zero is represented by a cluster containing no knots.
// For example, the number 204003 would be represented by a cord with knots tied in the following pattern
// 
// 
//      -XX--XXXX---XXX-
//         ^^    ^^^
//         ^^    ^^^
//         ^^    two zeros between these three segments
//         ^^
//         one zero between these two segments
// 
// Notice how adjacent dashes signal the presence of a zero.
// 
// 
// Your task is to translate a single quipu cord into an integer.  The cord will be given as a string knots
// containing only the characters 'X' and '-'.  There will be a single '-' between each cluster 
// of 'X's, as well as a leading '-' and a trailing '-'.  The first cluster will not be empty.
// 
// 
// DEFINITION
// Class:Quipu
// Method:readKnots
// Parameters:string
// Returns:int
// Method signature:int readKnots(string knots)
// 
// 
// CONSTRAINTS
// -knots contains between 3 and 50 characters, inclusive.
// -knots contains only the characters 'X' and '-'.  Note that 'X' is uppercase.
// -The first and last characters of knots are '-'s.  The second character is 'X'.
// -knots does not contain 10 consecutive 'X's.
// -knots will represent a number between 1 and 1000000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// "-XX-XXXX-XXX-"
// 
// Returns: 243
// 
// The first example above.
// 
// 1)
// "-XX--XXXX---XXX-"
// 
// Returns: 204003
// 
// The second example above.
// 
// 2)
// "-X-"
// 
// Returns: 1
// 
// 3)
// "-X-------"
// 
// Returns: 1000000
// 
// 4)
// "-XXXXXXXXX--XXXXXXXXX-XXXXXXXXX-XXXXXXX-XXXXXXXXX-"
// 
// Returns: 909979
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
