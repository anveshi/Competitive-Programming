#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;


class HuffmanDecoding {
public:
	string decode(string archive, vector <string> dictionary) {
		int sz,n,i;map <string,char> m;m.clear();
		sz = dictionary.size();
		for(i=0;i<sz;i++){
			m[dictionary[i]] = char('A'+i);
		}
		string s,ans;
		n = archive.length();
		ans ="";s="";
		for(i=0;i<n;i++){
			s+=archive[i];
			if(m[s]){
				ans+=m[s];
				s="";
			}
		}
		return ans;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, vector <string> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	HuffmanDecoding *obj;
	string answer;
	obj = new HuffmanDecoding();
	clock_t startTime = clock();
	answer = obj->decode(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <string> p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "101101";
	string t1[] = {"00","10","01","11"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "BDC";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "10111010";
	string t1[] = {"0","111","10"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "CBAC";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "0001001100100111001";
	string t1[] = {"1","0"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "BBBABBAABBABBAAABBA";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "111011011000100110";
	string t1[] = {"010","00","0110","0111","11","100","101"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "EGGFAC";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "001101100101100110111101011001011001010";
	string t1[] = {"110","011","10","0011","00011","111","00010","0010","010","0000"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "DBHABBACAIAIC";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// When text is encoded using Huffman codes, each symbol is replaced by a string of 0s and 1s called a bit string representation.  The replacement is done in such a way that the bit string representation of a symbol is never the prefix of the bit string representation of any other symbol.  This property allows us to unambiguously decode the encoded text.
// You will be given a string archive and a vector <string> dictionary. The i-th element of dictionary will be the bit string representation of the i-th uppercase letter. Decode archive using dictionary and return the result as a single string.
// 
// DEFINITION
// Class:HuffmanDecoding
// Method:decode
// Parameters:string, vector <string>
// Returns:string
// Method signature:string decode(string archive, vector <string> dictionary)
// 
// 
// CONSTRAINTS
// -archive will contain between 1 and 50 characters, inclusive. 
// -archive will contain only the characters '0' (zero) and '1' (one).
// -dictionary will contain between 1 and 26 elements, inclusive. 
// -Each element of dictionary will contain between 1 and 50 characters, inclusive. 
// -Each element of dictionary will contain only the characters '0' (zero) and '1' (one).
// -No element of dictionary will be a prefix of any other element of dictionary.
// -archive will be decodable using dictionary
// 
// 
// EXAMPLES
// 
// 0)
// "101101"
// {"00","10","01","11"}
// 
// Returns: "BDC"
// 
// Because there are no elements in dictionary that are prefixes of other elements, only one element of dictionary will be a prefix of archive.  In this case, it is the second element ("10") which represents 'B'.  The rest of the text can be decoded using the same logic.
// 
// 1)
// "10111010"
// {"0","111","10"}
// 
// Returns: "CBAC"
// 
// Note that elements of dictionary can be of different lengths.
// 
// 2)
// "0001001100100111001"
// {"1","0"}
// 
// Returns: "BBBABBAABBABBAAABBA"
// 
// '1' is replaced by 'A', '0' is replaced by 'B'.
// 
// 3)
// "111011011000100110"
// {"010","00","0110","0111","11","100","101"}
// 
// Returns: "EGGFAC"
// 
// 4)
// "001101100101100110111101011001011001010"
// {"110","011","10","0011","00011","111","00010","0010","010","0000"}
// 
// Returns: "DBHABBACAIAIC"
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
