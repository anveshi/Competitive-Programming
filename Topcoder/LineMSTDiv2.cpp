#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class LineMSTDiv2 {
public:
	int count(int N) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	LineMSTDiv2 *obj;
	int answer;
	obj = new LineMSTDiv2();
	clock_t startTime = clock();
	answer = obj->count(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 15;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 2;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 16;
	p1 = 682141922;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Given is an int N.
// 
// A complete graph is a graph in which each pair of vertices is connected by exactly one undirected edge.
// 
// A graph is called beautiful if:
// 
// It is a complete graph on N vertices.
// Each edge has an associated cost, and each of these costs is either 1 or 2.
// 
// Hence, there are exactly 2^(N*(N-1)/2) different beautiful graphs.
// 
// The minimum spanning tree (MST) of a beautiful graph is its subgraph with the following properties:
// 
// The subgraph contains all N vertices.
// The subgraph is connected. (I.e., it is possible to get from any vertex to any other vertex using only edges that belong to the subgraph.)
// The total cost of edges in the subgraph is as small as possible.
// 
// A single beautiful graph can have multiple MSTs.
// (Each of these MSTs will contain a different set of edges, but they will have the same total cost.)
// 
// An MST is called a line if the degree of each of its vertices is at most 2.
// 
// Hibiki likes MSTs.
// She also likes lines.
// For each beautiful graph G, let f(G) be the number of its MSTs that are lines.
// (Note that for some beautiful graphs it may be the case that f(G)=0.)
// 
// Let X be the sum of the values f(G) over all beautiful graphs G.
// Please calculate X for her.
// As X can be very large, compute and return the value (X modulo 1,000,000,007).
// 
// 
// DEFINITION
// Class:LineMSTDiv2
// Method:count
// Parameters:int
// Returns:int
// Method signature:int count(int N)
// 
// 
// CONSTRAINTS
// -N will be between 2 and 16, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 3
// 
// Returns: 15
// 
// Beautiful graphs are complete graphs on 3 vertices in which each edge has cost either 1 or 2.
// There are 8 such graphs.
// Some of these graphs have more than one MST.
// For example, the graph in which each edge has cost 1 has three different MSTs.
// In this case, each of those three MSTs is a line, so we count each of them.
// 
// 1)
// 2
// 
// Returns: 2
// 
// There are only 2 beautiful graphs. The value of f is 1 for both graphs, so the answer is 2.
// 
// 2)
// 16
// 
// Returns: 682141922
// 
// Don't forget to take modulo.
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
