#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;
const int Maxn = 55;
double Dp[Maxn][Maxn][Maxn];
vector <string> g;

class ShortestPathWithMagic {
public:
	int fun(int x,int y,int k){
		cout << x << " " << y << endl;

		if(Dp[x][y][k]>-1.0)
			return Dp[x][y][k];
		if(x==y){
			return Dp[x][y][k] = 0;
		}
		if(k==0){
			return Dp[x][y][k] = g[x][y]-'0';
		}
		else{
			double Ans =  10000000000.0;
			for(int i=0;i<g.size();i++){
				if(x==i)
					continue;
				double Ret1 = Ans;
				if(k>0)
					Ret1 = (g[x][i]-'0')/2.0 + fun(i,y,k-1);	
				double Ret2 = (g[x][i]-'0') + fun(i,y,k);
				double Ret = min(Ret1, Ret2);
				Ans = min(Ret,Ans);
			}
			return Dp[x][y][k] = Ans;
		}

	}
	double getTime(vector <string> dist, int k) {
		for(int i=0;i<dist.size();i++){
			g.push_back(dist[i]);
		}
		for(int i=0;i<Maxn;i++){
			for(int j=0;j<Maxn;j++){
				for(int k=0;k<Maxn;k++){
					Dp[i][j][k] = -2.0;
				}
			}
		}
		return fun(0,1,k);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	ShortestPathWithMagic *obj;
	double answer;
	obj = new ShortestPathWithMagic();
	clock_t startTime = clock();
	answer = obj->getTime(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	double p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"094","904","440"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 4.5;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"094","904","440"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 4.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"094","904","440"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 50;
	p2 = 4.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"094","904","440"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 8.0;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"076237","708937","680641","296059","334508","771980"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 3.5;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"00","00"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 50;
	p2 = 0.0;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// There are n cities, numbered from 0 to n-1.
// It is possible to travel directly between any two cities.
// Different pairs of cities may require different travel times.
// You are given the travel times as a vector <string> dist with n elements, each consisting of n digits.
// The digit dist[i][j] represents the time needed to travel between cities i and j in either direction.
// 
// You are also given an int k.
// You have k magic potions.
// The potion makes you twice as fast as you normally are.
// Each time you travel (directly) from some city to some other city, you may take one of the potions.
// If you do, that travel will only take half of what it normally would.
// You are not allowed to take more than one potion at the same time.
// You are not required to drink all potions you have.
// 
// 
// Compute and return the smallest amount of time in which you can travel from city 0 to city 1.
// 
// DEFINITION
// Class:ShortestPathWithMagic
// Method:getTime
// Parameters:vector <string>, int
// Returns:double
// Method signature:double getTime(vector <string> dist, int k)
// 
// 
// NOTES
// -The travel times given in dist don't have to satisfy the triangle inequality.
// -Your return value must have a relative or absolute error less than 1e-9
// 
// 
// CONSTRAINTS
// -dist will contain between 2 and 50 elements, inclusive.
// -Each string in dist will contain exactly |dist| characters.
// -Each character in dist will be between '0' and '9', inclusive.
// -For any valid i and j: dist[i][j] = dist[j][i].
// -For any valid i: dist[i][i] = 0.
// -k will be between 0 and 50, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {"094",
//  "904",
//  "440"}
// 1
// 
// Returns: 4.5
// 
// According to dist, you need:
// 
// 9 units of time to travel between cities 0 and 1
// 4 units of time to travel between cities 0 and 2
// 4 units of time to travel between cities 1 and 2
// 
// 
// You have a single magic potion.
// The optimal solution is to drink the potion and to travel directly from city 0 to city 1.
// This trip will take 9/2 = 4.5 units of time.
// 
// 1)
// {"094",
//  "904",
//  "440"}
// 2
// 
// Returns: 4.0
// 
// The normal travel times are the same as in Example 0, but now you have two magic potions.
// This changes the optimal solution.
// Now it is better to travel from 0 to 2 and then from 2 to 1.
// For each segment of your trip you will drink one of the potions.
// Thus, each segment will only take 4/2 = 2 units of time.
// 
// 2)
// {"094",
//  "904",
//  "440"}
// 50
// 
// Returns: 4.0
// 
// You are not allowed to use more than one potion at the same time.
// The optimal solution remains the same as in Example 1, only now you will still have 48 magic potions when you reach city 1.
// 
// 3)
// {"094",
//  "904",
//  "440"}
// 0
// 
// Returns: 8.0
// 
// 
// 
// 4)
// {"076237",
//  "708937",
//  "680641",
//  "296059",
//  "334508",
//  "771980"}
// 1
// 
// Returns: 3.5
// 
// 
// 
// 5)
// {"00",
//  "00"}
// 50
// 
// Returns: 0.0
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
