#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;

map<string, int> M;
class LiveConcert {
public:

	int maxHappiness(vector <int> h, vector <string> s) {
		M.clear();
		for(int i=0;i<s.size();i++){
			M[s[i]] = max(M[s[i]],h[i]);
			//cout << M[s[i]] << endl;
		}
		int ans =0;
		for(map<string, int>:: iterator it=M.begin();it!=M.end();it++){
			ans+=(it->second);
		}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	LiveConcert *obj;
	int answer;
	obj = new LiveConcert();
	clock_t startTime = clock();
	answer = obj->maxHappiness(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <string> p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {10,5,6,7,1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"ciel","bessie","john","bessie","bessie","john"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 23;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {3,3,4,3,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"a","a","a","a","a"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,2,3,4,5,6,7,8,9,10,100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"a","b","c","d","e","e","d","c","b","a","abcde"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 140;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"oyusop"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 100;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {100,100,100,100,100,100,100,100,100,100,100,100,100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"haruka","chihaya","yayoi","iori","yukiho","makoto","ami","mami","azusa","miki","hibiki","takane","ritsuko"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1300;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Today, a large live concert is going to take place.
// Some interprets (called "idols") are going to perform at the concert.
// Different idols have different names.
// 
// There are M distinct songs that can be included in the concert.
// The songs are numbered 0 through M-1.
// Song i can only be performed by the idol s[i].
// Including this song in the concert will increase the happiness of the audience by h[i].
// 
// We have to choose the set list for this concert.
// Our goal is to make the audience as happy as possible.
// However, the concert time is limited and therefore each idol can only perform at most one song.
// 
// You are given the vector <int> h and the vector <string> s with M elements each.
// Find the set of songs that should be played at the concert.
// The set of songs must have the following properties:
// 
// Each idol will perform at most one song.
// After hearing the songs, the happiness of the audience will increase by the largest amount possible.
// 
// Return the largest possible amount of happiness the audience can gain.
// 
// 
// DEFINITION
// Class:LiveConcert
// Method:maxHappiness
// Parameters:vector <int>, vector <string>
// Returns:int
// Method signature:int maxHappiness(vector <int> h, vector <string> s)
// 
// 
// NOTES
// -The value M is not given explicitly. You can determine M as the length of h.
// 
// 
// CONSTRAINTS
// -M will be between 1 and 100, inclusive.
// -h and s will contain exactly M elements each.
// -All numbers in h will be between 1 and 100, inclusive.
// -All strings in s will have between 1 and 10 characters, inclusive.
// -For each valid i, each character in s[i] will be a lowercase letter ('a'-'z').
// 
// 
// EXAMPLES
// 
// 0)
// {10,5,6,7,1,2}
// {"ciel","bessie","john","bessie","bessie","john"}
// 
// Returns: 23
// 
// The optimal concert will contain three songs:
// 
// "ciel" will sing the song number 0, which will give the audience 10 happiness
// "bessie" will sing the song number 3, which will give the audience 7 happiness
// "john" will sing the song number 2, which will give the audience 6 happiness
// 
// The total amount of happiness will be 10+7+6 = 23.
// 
// 1)
// {3,3,4,3,3}
// {"a","a","a","a","a"}
// 
// Returns: 4
// 
// There is a single idol, thus the concert will consist of a single song.
// The optimal choice is the song that gives 4 happiness.
// 
// 2)
// {1,2,3,4,5,6,7,8,9,10,100}
// {"a","b","c","d","e","e","d","c","b","a","abcde"}
// 
// Returns: 140
// 
// 
// 
// 3)
// {100}
// {"oyusop"}
// 
// Returns: 100
// 
// 
// 
// 4)
// {100,100,100,100,100,100,100,100,100,100,100,100,100}
// {"haruka","chihaya","yayoi","iori","yukiho","makoto","ami","mami","azusa","miki","hibiki","takane","ritsuko"}
// 
// Returns: 1300
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
