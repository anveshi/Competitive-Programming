#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;
class MinimalTriangle {
public:
	double maximalArea(int length) {
		LL l =length;
		double s3;
		s3 = sqrt(3);
		return (s3*l*l)/4.00;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, double p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	MinimalTriangle *obj;
	double answer;
	obj = new MinimalTriangle();
	clock_t startTime = clock();
	answer = obj->maximalArea(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	double p1;
	
	{
	// ----- test 0 -----
	p0 = 5;
	p1 = 10.825317547305485;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 10;
	p1 = 43.30127018922194;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 100000;
	p1 = 4.330127018922194E9;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are given a int length.
// We have a regular hexagon: a polygon with six sides, in which all internal angles have 120 degrees and length is the length of each side.
// We are going to draw three non-intersecting diagonals in some way.
// These will divide the hexagon into four triangles.
// We will then compute their areas, take a piece of paper and write down the smallest of those four areas.
// Compute and return the largest number we can obtain on our piece of paper (by choosing which diagonals to draw).
// 
// DEFINITION
// Class:MinimalTriangle
// Method:maximalArea
// Parameters:int
// Returns:double
// Method signature:double maximalArea(int length)
// 
// 
// NOTES
// -Your return value must have a relative or an absolute error of less than 1e-9.
// 
// 
// CONSTRAINTS
// -length will be between 1 and 1,000,000 (10^6), inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 5
// 
// Returns: 10.825317547305485
// 
// 
// 
// 1)
// 10
// 
// Returns: 43.30127018922194
// 
// 
// 
// 2)
// 100000
// 
// Returns: 4.330127018922194E9
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
