import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class SlayingDeer
{
	public int getTime(int A, int B, int C)
	{
		
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2);
		System.out.println("]");
		SlayingDeer obj;
		int answer;
		obj = new SlayingDeer();
		long startTime = System.currentTimeMillis();
		answer = obj.getTime(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		int p3;
		
		// ----- test 0 -----
		p0 = 5;
		p1 = 4;
		p2 = 20;
		p3 = 20;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 5;
		p1 = 4;
		p2 = 47;
		p3 = 34;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 10;
		p1 = 17;
		p2 = 1;
		p3 = -1;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 133;
		p1 = 198;
		p2 = 7515;
		p3 = 7515;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 1;
		p1 = 1000;
		p2 = 15819;
		p3 = -1;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Although TopCoder member Running Wild is a vegetarian, he has recently decided that he would eat venison if he could catch a deer himself. Before committing too much time and effort to this endeavor, Running Wild would like to estimate his chances at success. To do this, he assumes that he will run at a constant speed of A meters per minute without ever getting tired. Similarly, a deer will run at a constant speed of B meters per minute, but after every 30 minutes of running, it must stop and rest for 15 minutes. Finally, Running Wild also assumes that he will begin at a given distance of C meters behind the deer, and that they will always be running in the same fixed direction.
	// 
	// Create a class SlayingDeer that contains a method getTime, which is given an int A, an int B, and an int C, representing the quantities described above. The method should return the number of minutes (rounded up) it will take for Running Wild to catch the deer. If Running Wild will never catch the deer, the method should return -1.
	// 
	// DEFINITION
	// Class:SlayingDeer
	// Method:getTime
	// Parameters:int, int, int
	// Returns:int
	// Method signature:int getTime(int A, int B, int C)
	// 
	// 
	// NOTES
	// -If Running Wild and the deer are at precisely the same position, then Running Wild is considered to have caught the deer.
	// 
	// 
	// CONSTRAINTS
	// -A and B will be between 1 and 1000 inclusive.
	// -C will be between 1 and 100000 inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 5
	// 4
	// 20
	// 
	// Returns: 20
	// 
	// Running Wild gains one meter per minute over the first 20 minutes before catching the deer.
	// 
	// 1)
	// 5
	// 4
	// 47
	// 
	// Returns: 34
	// 
	// As in the previous example, Running Wild will gain 1 meter per minute for the first 30 minutes. Then, however, the deer stops and rests. Running Wild gains 5 meters per minute while the deer is resting. Note that the answer is rounded up.
	// 
	// 2)
	// 10
	// 17
	// 1
	// 
	// Returns: -1
	// 
	// 3)
	// 133
	// 198
	// 7515
	// 
	// Returns: 7515
	// 
	// 4)
	// 1
	// 1000
	// 15819
	// 
	// Returns: -1
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
