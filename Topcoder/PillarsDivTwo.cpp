#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;
double dp[55][105];
float a[55];
class PillarsDivTwo {

public:
	double dist(double a,double b){
		return sqrt(a*a+b*b);
	}
	double maximalLength(vector <int> h, int w) {
		int n = h.size();int i,j,k;
		for(i=0;i<n;i++){
			for(j=1;j<=h[i];j++){
				if(i==0)dp[i][j]=0.00;
				else{
					dp[i][j]=0.00;
					for(k=1;k<=h[i-1];k++){
						dp[i][j]=max(dp[i][j],dp[i-1][k]+dist(abs(k-j),w));
					}
				}
			}	
		}
		double ans=0.0;
		for(i=1;i<=h[n-1];i++){
			ans = max(ans,dp[n-1][i]);
		}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	PillarsDivTwo *obj;
	double answer;
	obj = new PillarsDivTwo();
	clock_t startTime = clock();
	answer = obj->maximalLength(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	double p2;
	
	{
	// ----- test 0 -----
	int t0[] = {3,3,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 5.656854249492381;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100;
	p2 = 300.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {100,2,100,2,100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = 396.32310051270036;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {2,1,1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 3.82842712474619;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// On a horizontal line, there are N uniformly spaced vertical pillars.
// The pillars are numbered 0 through N-1, in order.
// For each i, the distance between the bottoms of pillars i and i+1 is exactly w.
// For each i, the height of pillar i (0-based index) is an integer between 1 and heights[i], inclusive.
// We want to take a single piece of rope and use it to join the top ends of all pillars, in order.
// (Once in place, the rope will have the shape of a polyline consisting of N-1 segments.)
// What is the shortest length of rope that is guaranteed to be sufficient, regardless of the actual pillar heights?
// 
// You are given the vector <int> heights and the int w.
// Compute and return the answer to the above question.
// In other words, find a sequence of pillar heights (within the given constraints) for which the length of the rope we need is maximized, and return that maximum.
// 
// DEFINITION
// Class:PillarsDivTwo
// Method:maximalLength
// Parameters:vector <int>, int
// Returns:double
// Method signature:double maximalLength(vector <int> height, int w)
// 
// 
// NOTES
// -Your return value must have a relative or an absolute error of less than 1e-9.
// 
// 
// CONSTRAINTS
// -heights will contain between 1 and 50 elements, inclusive.
// -Each element of heights will be between 1 and 100, inclusive.
// -w will be between 1 and 100, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {3,3,3}
// 2
// 
// Returns: 5.656854249492381
// 
// 
// 
// 1)
// {1,1,1,1}
// 100
// 
// Returns: 300.0
// 
// 
// 
// 2)
// {100,2,100,2,100}
// 4
// 
// Returns: 396.32310051270036
// 
// We will need the most rope if columns 0, 2, and 4 have height 100 each, and columns 1 and 3 have height 1 each.
// 
// 3)
// {2,1,1,2}
// 1
// 
// Returns: 3.82842712474619
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
