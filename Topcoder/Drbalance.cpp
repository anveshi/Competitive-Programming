#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class Drbalance {
public:
	int fun(string S){
		// counts num  of prefixes with negative balance;
		int nc =0,pc=0,ans=0;
		for(int i=0;i<S.length();i++){
			if(S[i]=='-')
				nc++;
			else
				pc++;
			if(nc>pc)
				ans++;
		}
		return ans;
	}
	int lesscng(string s, int k) {
		int n = s.length();
		if(fun(s)<=k)
			return 0;
		else{
			for(int i=0;i<n;i++){
				if(s[i]=='-'){
					s[i] = '+';
					return 1 + lesscng(s,k);
				}
			}
		}	
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
	cout << "]" << endl;
	Drbalance *obj;
	int answer;
	obj = new Drbalance();
	clock_t startTime = clock();
	answer = obj->lesscng(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = "---";
	p1 = 1;
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "+-+-";
	p1 = 0;
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "-+-+---";
	p1 = 2;
	p2 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "-------++";
	p1 = 3;
	p2 = 3;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "-+--+--+--++++----+";
	p1 = 3;
	p2 = 2;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// A plus/minus string is a string in which each character is either a '+' or a '-'.
// The balance of a plus/minus string is computed as the number of '+' characters minus the number of '-' characters.
// For example, the balance of the string "++-+" is 3-1 = 2, and the balance of the string "---" is 0-3 = -3.
// 
// The prefix of a string S is any string that can be obtained by removing some (possibly none, possibly all) characters from the end of S.
// For example, the prefixes of the string "++-+" are the strings "++-+", "++-", "++", "+", and "".
// 
// Given a plus/minus string, its negativity is the number of its prefixes that have a negative balance.
// For example, the negativity of the string "++-+" is 0, as none of its prefixes have a negative balance.
// The negativity of the string "---" is 3.
// Its three prefixes with a negative balance are "-", "--", and "---".
// 
// You are given a string s that is a plus/minus string.
// You are also given an int k.
// Your goal is to change s into a string with negativity at most k.
// In other words, you want to change s into a string that has at most k prefixes that have a negative balance.
// 
// In order to change s you are going to perform a sequence of zero or more steps.
// In each step you can change a single '-' character in s into a '+' or vice versa.
// Compute and return the smallest number of steps needed.
// 
// DEFINITION
// Class:Drbalance
// Method:lesscng
// Parameters:string, int
// Returns:int
// Method signature:int lesscng(string s, int k)
// 
// 
// CONSTRAINTS
// -s will contain between 1 and 50 characters, inclusive.
// -k will be between 0 and the length of s, inclusive.
// -Each character in s will be either '+' or '-'.
// 
// 
// EXAMPLES
// 
// 0)
// "---"
// 1
// 
// Returns: 1
// 
// One step is sufficient.
// If we change character 0 of s into a '+', we will obtain the string "+--".
// This string has only one prefix with a negative balance - namely, the entire string "+--".
// As k=1, we have reached our goal.
// 
// 1)
// "+-+-"
// 0
// 
// Returns: 0
// 
// 
// 
// 2)
// "-+-+---"
// 2
// 
// Returns: 1
// 
// 
// 
// 3)
// "-------++"
// 3
// 
// Returns: 3
// 
// 
// 
// 4)
// "-+--+--+--++++----+"
// 3
// 
// Returns: 2
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
