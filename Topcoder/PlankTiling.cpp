#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class PlankTiling {
public:
	int sumup(int H, int W) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	PlankTiling *obj;
	int answer;
	obj = new PlankTiling();
	clock_t startTime = clock();
	answer = obj->sumup(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 4;
	p2 = 11;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	p1 = 4;
	p2 = 5;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 9;
	p2 = 121;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 29;
	p1 = 841;
	p2 = 193514715;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You have a sufficient supply of identical planks.
// Each plank has the shape of an 1 times H rectangle.
// 
// The floor of your room is also a rectangle.
// Its width is W and its height is 2H-1.
// You want to use the planks you have to tile the floor.
// The entire floor must be covered and the planks must not overlap.
// (The width W is guaranteed to be a multiple of H, so this is always possible.)
// 
// You are given the two ints H and W.
// Return the number of ways to tile the floor, modulo 1,000,000,007.
// 
// DEFINITION
// Class:PlankTiling
// Method:sumup
// Parameters:int, int
// Returns:int
// Method signature:int sumup(int H, int W)
// 
// 
// CONSTRAINTS
// -H will be between 2 and 1000, inclusive.
// -W will be between 2 and 1000, inclusive.
// -W will be a multiple of H.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 4
// 
// Returns: 11
// 
// We are using 1x2 planks to tile a rectangle of width 4 and height 3. There are eleven different ways to do so:
// 
// 
// 1)
// 4
// 4
// 
// Returns: 5
// 
// 
// 
// 2)
// 3
// 9
// 
// Returns: 121
// 
// 
// 
// 3)
// 29
// 841
// 
// Returns: 193514715
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
