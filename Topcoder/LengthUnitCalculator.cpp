#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;
string S[] = {"in", "ft", "yd", "mi"};
int L[] = {1760*3*12,1760*3,1760,1};
class LengthUnitCalculator {
public:
	double calc(int amount, string fromUnit, string toUnit) {
		int X,Y;
    for(int i=0;i<4;i++){
      if(fromUnit == S[i])
        X = i;
      if(toUnit == S[i])
        Y = i;
    }
    double XX,YY;
    XX = 1.0/(double)L[X];
    YY = 1.0/(double)L[Y];
    double Ans = amount * (XX/(double)YY);
    return Ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, string p1, string p2, bool hasAnswer, double p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << "\"" << p1 << "\"" << "," << "\"" << p2 << "\"";
	cout << "]" << endl;
	LengthUnitCalculator *obj;
	double answer;
	obj = new LengthUnitCalculator();
	clock_t startTime = clock();
	answer = obj->calc(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	string p1;
	string p2;
	double p3;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = "mi";
	p2 = "ft";
	p3 = 5280.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = "ft";
	p2 = "mi";
	p3 = 1.893939393939394E-4;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 123;
	p1 = "ft";
	p2 = "yd";
	p3 = 41.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1000;
	p1 = "mi";
	p2 = "in";
	p3 = 6.336E7;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 1;
	p1 = "in";
	p2 = "mi";
	p3 = 1.5782828282828283E-5;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 47;
	p1 = "mi";
	p2 = "mi";
	p3 = 47.0;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Your task is to write a calculator that will convert between four different length units: inches (in), feet (ft), yards (yd), and miles (mi).
// 
// The conversions between these units:
// 
// 1 ft = 12 in
// 1 yd = 3 ft
// 1 mi = 1760 yd
// 
// 
// You are given an int amount and strings fromUnit and toUnit.
// Compute and return the amount of toUnits that corresponds to amount fromUnits.
// (For example, if amount=41, fromUnit="mi", and toUnit="in", you are supposed to compute the number of inches in 41 miles.)
// 
// Note that the result will not necessarily be an integer.
// 
// DEFINITION
// Class:LengthUnitCalculator
// Method:calc
// Parameters:int, string, string
// Returns:double
// Method signature:double calc(int amount, string fromUnit, string toUnit)
// 
// 
// NOTES
// -Pay attention to the unusual time limit.
// 
// 
// CONSTRAINTS
// -amount will be between 1 and 1,000, inclusive.
// -fromUnit will be one of {"in", "ft", "yd", "mi"}.
// -toUnit will be one of {"in", "ft", "yd", "mi"}.
// 
// 
// EXAMPLES
// 
// 0)
// 1
// "mi"
// "ft"
// 
// Returns: 5280.0
// 
// We are asked to convert 1 mile into feet.
// From the information in the statement we know that 1 mi = 1760 yd = (1760 * 3) ft = 5280 ft.
// 
// 1)
// 1
// "ft"
// "mi"
// 
// Returns: 1.893939393939394E-4
// 
// Here we have 1 ft = 1/5280 mi, which is approximately 0.000189394 miles.
// 
// 2)
// 123
// "ft"
// "yd"
// 
// Returns: 41.0
// 
// 
// 
// 3)
// 1000
// "mi"
// "in"
// 
// Returns: 6.336E7
// 
// 
// 
// 4)
// 1
// "in"
// "mi"
// 
// Returns: 1.5782828282828283E-5
// 
// 
// 
// 5)
// 47
// "mi"
// "mi"
// 
// Returns: 47.0
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
