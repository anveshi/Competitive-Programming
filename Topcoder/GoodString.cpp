#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class GoodString {
public:
	int fun(string s){
		//cout << "S= " << s << endl;
		int n = s.length();
		s+='S';
		if(n%2)
			return 0;
		else if(n==0)
			return 1;
		else{
			int f =0;string t="";
			for(int i=0;i<n;i++){
				if(s[i]=='a' && s[i+1]=='b' && f==0){
					i++;f=1;
				}
				else 
					t+=s[i];
			}
			if(t.length()<n){
				return fun(t);
			}
			else return 0;
		}
	}
	string isGood(string s) {
		if(fun(s))
			return "Good";
		return "Bad";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	GoodString *obj;
	string answer;
	obj = new GoodString();
	clock_t startTime = clock();
	answer = obj->isGood(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "ab";
	p1 = "Good";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "aab";
	p1 = "Bad";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "aabb";
	p1 = "Good";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "ababab";
	p1 = "Good";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "abaababababbaabbaaaabaababaabbabaaabbbbbbbb";
	p1 = "Bad";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "aaaaaaaabbbaaabaaabbabababababaabbbbaabbabbbbbbabb";
	p1 = "Good";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Chandan loves to play with strings.
// He just learned a new operation: inserting one string X into another string Y.
// 
// 
// 
// When inserting X into Y, it is also allowed to place X at the beginning or at the end of Y.
// For example, there are exactly five ways how to insert the string "ab" into the string "????":
// you can produce one of the strings "ab????", "?ab???", "??ab??", "???ab?", and "????ab".
// 
// 
// 
// According to Chandan, a good string is a string that can be constructed in the following way:
// Initially, he takes the empty string "".
// Then, he performs a sequence of zero or more steps.
// In each step he inserts the string "ab" anywhere into the current string.
// 
// 
// 
// According to the above definition, the strings "ab", "aabb", and "aababb" are good while the strings "aab", "ba", and "abbb" are not good.
// 
// 
// 
// Chandan's friend Ravi came up with a string s.
// Ravi asked Chandan whether it is a good string.
// Return "Good" (quotes for clarity) if the string is good, or "Bad" if the string is not good.
// 
// 
// DEFINITION
// Class:GoodString
// Method:isGood
// Parameters:string
// Returns:string
// Method signature:string isGood(string s)
// 
// 
// CONSTRAINTS
// -s will contain between 1 and 50 characters, inclusive.
// -Each element of s will be either 'a' or 'b'.
// 
// 
// EXAMPLES
// 
// 0)
// "ab"
// 
// Returns: "Good"
// 
// Chandan can start with an empty string and insert "ab".
// 
// 1)
// "aab"
// 
// Returns: "Bad"
// 
// 
// 
// 2)
// "aabb"
// 
// Returns: "Good"
// 
// Chandan can construct this string as follows: "" -> "ab" -> "aabb".
// 
// 3)
// "ababab"
// 
// Returns: "Good"
// 
// One way to construct this string is to append "ab" to the current string three times.
// 
// 4)
// "abaababababbaabbaaaabaababaabbabaaabbbbbbbb"
// 
// Returns: "Bad"
// 
// 
// 
// 5)
// "aaaaaaaabbbaaabaaabbabababababaabbbbaabbabbbbbbabb"
// 
// Returns: "Good"
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
