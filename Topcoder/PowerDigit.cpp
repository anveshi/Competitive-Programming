#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class PowerDigit {
public:
	int digitK(int x, int y, int k) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	PowerDigit *obj;
	int answer;
	obj = new PowerDigit();
	clock_t startTime = clock();
	answer = obj->digitK(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 10;
	p2 = 1;
	p3 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 10;
	p2 = 4;
	p3 = -1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 2;
	p1 = 1000;
	p2 = 0;
	p3 = 6;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 9999;
	p1 = 10000;
	p2 = 4;
	p3 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// We need to know the k-th digit in x to the power y. A value of 0 for
// k means that the digit of interest is the rightmost digit, a value of 1 means 
// the digit next to the rightmost digit, etc.
// 
// Create a class PowerDigit that contains a method digitK that is given x,
// y, and k and that returns the k-th digit (an integer in the range 0 to 9 inclusive)
// in x to the power y.
// If there is no k-th digit in x to the power y return -1.
// 
// 
// 
// DEFINITION
// Class:PowerDigit
// Method:digitK
// Parameters:int, int, int
// Returns:int
// Method signature:int digitK(int x, int y, int k)
// 
// 
// CONSTRAINTS
// -x is between 0 and 10,000, inclusive.
// -y is between 1 and 10,000, inclusive.
// -k is between 0 and 4, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 10
// 1
// 
// Returns: 2
// 
// 
// 
//    2^10 = 1024 so the digit 1 is 2.
// 
// 
// 
// 1)
// 2
// 10
// 4
// 
// Returns: -1
// 
// 
// 
//     1024 does not have a digit 4 (the 1 in 1024 is digit 3)
// 
// 2)
// 2
// 1000
// 0
// 
// Returns: 6
// 
// 
// 
//    2^1000 is a very large number. But digit 0 is predictable since with 
//    succeeding powers it follows
//    the sequence 2, 4, 8, 6, 2, 4, 8, 6, 2, ....
// 
// 3)
// 9999
// 10000
// 4
// 
// Returns: 0
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
