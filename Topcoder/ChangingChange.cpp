#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;


class ChangingChange {
public:
	vector <int> countWays(vector <int> ways, vector <int> valueRemoved, vector <int> numRemoved) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, bool hasAnswer, vector <int> p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	ChangingChange *obj;
	vector <int> answer;
	obj = new ChangingChange();
	clock_t startTime = clock();
	answer = obj->countWays(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p3.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p3[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p3.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p3[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	
	{
	// ----- test 0 -----
	int t0[] = {1,4,6};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,2,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {3,1,0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,2,1,0,0,0,0,0,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {8,8,1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,7,1,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {6,0,7,7};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,2,3,6,9,14};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,4,5,1,2,3,4,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,1,1,1,1,2,2,2,2,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {9,10,11,12,13,6,8,8,10,12};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,1000000};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1000000006,999000007};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1,2,3,6,9,14};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,3,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1000000,4,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {34955525,2,12};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// John is a coin collector.
// Each of the coins in his collection has an integer value.
// Each value is between 1 and D, inclusive.
// It is possible that multiple coins have the same value.
// It is also possible that some of the possible coin values are not present in John's collection.
// John can distinguish between any two coins, even if they have the same value.
// 
// You don't know what coins are in John's collection.
// The only information you have about the collection is the vector <int> ways with D+1 elements.
// Let f(x) be the number of ways to make x dollars using some subset of John's coins.
// For each i from 0 to D, inclusive, ways[i] is equal to (f(i) mod 1,000,000,007).
// 
// For example, suppose that John's collection consists of two coins, each worth 1 dollar.
// Then, f(0) = 1, f(1) = 2, f(2) = 1, and f(x) = 0 for x greater than 2.
// (Note that the empty subset of John's coins is worth 0 dollars, hence f(0) = 1.)
// 
// John is considering giving some of his coins to his nephew.
// He came up with Q independent scenarios.
// The scenarios are numbered from 0 to Q-1.
// For each valid i, in scenario i John will keep his entire collection, with one exception:
// he will give numRemoved[i] coins, each with value valueRemoved[i], to his nephew.
// You may assume that all scenarios are valid: numRemoved[i] never exceeds the number of available coins in John's collection.
// 
// John now asked you the same question about each scenario:
// "After I give the selected coins to my nephew, what will be the value (f(D) mod 1,000,000,007) for my new collection?"
// 
// You are given the vector <int>s ways, valueRemoved, and numRemoved.
// Return a vector <int> with Q elements.
// For each valid i, element i of the return value should be the answer to the question about scenario i.
// 
// DEFINITION
// Class:ChangingChange
// Method:countWays
// Parameters:vector <int>, vector <int>, vector <int>
// Returns:vector <int>
// Method signature:vector <int> countWays(vector <int> ways, vector <int> valueRemoved, vector <int> numRemoved)
// 
// 
// NOTES
// -You may assume that the answer to the question about each scenario is the same for all possible collections that correspond to the input data.
// 
// 
// CONSTRAINTS
// -D will be between 1 and 1999, inclusive.
// -ways will contain exactly D+1 elements.
// -Each element of ways will be between 0 and 1,000,000,006, inclusive.
// -Q will be between 1 and 2000, inclusive.
// -valueRemoved will contain exactly Q elements.
// -numRemoved will contain exactly Q elements.
// -Each element of valueRemoved will be between 1 and D, inclusive.
// -Each element of numRemoved will be between 1 and 1,000,000, inclusive.
// -There is at least one possible collection of coins that corresponds to the values in ways and makes all scenarios described by valueRemoved and numRemoved possible.
// 
// 
// EXAMPLES
// 
// 0)
// {1, 4, 6}
// {1, 1, 1}
// {1, 2, 3}
// 
// Returns: {3, 1, 0 }
// 
// Given the input data, one possibility is that John's collection consists of four coins worth 1 dollar each.
// For this collection:
// 
// If John gives 1 of the 1-dollar coins to his nephew, f(2) will be 3.
// If John gives 2 of the 1-dollar coins to his nephew, f(2) will be 1.
// If John gives 3 of the 1-dollar coins to his nephew, f(2) will be 0.
// 
// 
// 1)
// {1, 2, 1, 0, 0, 0, 0, 0, 7}
// {8, 8, 1, 1}
// {1, 7, 1, 2}
// 
// Returns: {6, 0, 7, 7 }
// 
// John's collection may consist of two coins worth 1 dollar each and seven coins worth 8 dollars each.
// 
// 2)
// {1, 2, 3, 6, 9, 14}
// {1, 2, 3, 4, 5, 1, 2, 3, 4, 5}
// {1, 1, 1, 1, 1, 2, 2, 2, 2, 2}
// 
// Returns: {9, 10, 11, 12, 13, 6, 8, 8, 10, 12 }
// 
// John's collection may consist of ten coins: for each x between 1 and 5, inclusive, there are two coins worth x dollars each.
// 
// 3)
// {1, 0}
// {1, 1}
// {1, 1000000}
// 
// Returns: {1000000006, 999000007 }
// 
// Remember that the values in ways are given modulo 1,000,000,007 and that your return values must also be given modulo 1,000,000,007.
// 
// 4)
// {1, 2, 3, 6, 9, 14}
// {1, 3, 5}
// {1000000, 4, 2}
// 
// Returns: {34955525, 2, 12 }
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
