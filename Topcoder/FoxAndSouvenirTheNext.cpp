#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair
using namespace std;
typedef pair<int,int> pii;
int dp[51][1251];
class FoxAndSouvenirTheNext {
public:
	string ableToSplit(vector <int> value) {
	map <pair<int,int> ,int> mpa;
	mpa.clear();
	LL i,j,s=0,k;
	LL n=value.size();
	for(i=0;i<n;i++){
		s+=value[i];
	}
	for(i=0;i<51;i++)for(j=0;j<1251;j++)dp[i][j]=0;
	dp[0][0]=1;
	set<pair<int,int> > se;
	for(i=0;i<n;i++){
		se.clear();
		for(j=0;j<n;j++){
			for(k=0;k<1251;k++){
				if(dp[j][k]){
				se.insert(mp(j+1,k+value[i]));
				}
			}
		}
		for(set<pair<int,int> >::iterator it=se.begin();it!=se.end();it++)
			dp[it->first][it->second]=1;
	}
	if(s%2!=0 || n%2!=0)return "Impossible";
	else{
		if(dp[n/2][s/2]==0)
			return  "Impossible" ;
		else 
			return "Possible";
	}	
}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	FoxAndSouvenirTheNext *obj;
	string answer;
	obj = new FoxAndSouvenirTheNext();
	clock_t startTime = clock();
	answer = obj->ableToSplit(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	string p1;
	
	{
	// ----- test 0 -----
	int t0[] = {1,2,3,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Possible";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,1,1,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Impossible";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,1,2,3,5,8};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Possible";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {2,3,5,7,11,13};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Impossible";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Possible";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Impossible";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Ciel just returned home from her trip to New Fox City.
// She has brought a bunch of souvenirs.
// You are given their values in a vector <int> value.
// 
// 
// Now she wants to give each souvenir either to her mother or to her father.
// She would like to divide the souvenirs in a fair way.
// More precisely:
// 
// The total number of souvenirs given to her mother must be the same as the total number of souvenirs given to her father.
// At the same time, the total value of souvenirs given to her mother must be the same as the total value of souvenirs given to her father.
// 
// 
// 
// Return "Possible" if she can reach her goal, and "Impossible" otherwise.
// 
// DEFINITION
// Class:FoxAndSouvenirTheNext
// Method:ableToSplit
// Parameters:vector <int>
// Returns:string
// Method signature:string ableToSplit(vector <int> value)
// 
// 
// CONSTRAINTS
// -value will contain between 1 and 50 elements, inclusive.
// -Each element in value will be between 1 and 50, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1,2,3,4}
// 
// Returns: "Possible"
// 
// One valid solution is to give the souvenirs with values 1 and 4 to her mother and the other two to her father. Each parent receives two souvenirs, and as 1+4 = 2+3, the total value is also the same for both parents.
// 
// 1)
// {1,1,1,3}
// 
// Returns: "Impossible"
// 
// There is no valid solution. Note that {1,1,1} and {3} is not a valid way to split the souvenirs: even though the total value is the same, the number of souvenirs is not.
// 
// 2)
// {1,1,2,3,5,8}
// 
// Returns: "Possible"
// 
// We have 1+1+8 = 2+3+5.
// 
// 3)
// {2,3,5,7,11,13}
// 
// Returns: "Impossible"
// 
// The sum of values is an odd number, so it is impossible.
// 
// 4)
// {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48}
// 
// Returns: "Possible"
// 
// 
// 
// 5)
// {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50}
// 
// Returns: "Impossible"
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
