#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class CombiningSlimes {
public:
	int maxMascots(vector <int> a) {
		//sort(a.rbegin(),a.rend());
		int n = a.size();
		int idx = 1,val=a[0],ans=0;
		while(idx<n){
			ans += val*a[idx];
			val = val+a[idx];
			idx++;
		}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	CombiningSlimes *obj;
	int answer;
	obj = new CombiningSlimes();
	clock_t startTime = clock();
	answer = obj->maxMascots(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {3,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {2,2,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 11;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {3,1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 11;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1,3,4,1,5,6,7,11,61,51,31,41,6};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 395;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// The idols Ami and Mami like playing games.
// Today they bought a new game.
// At the beginning of the game a group of slimes appears on the screen.
// In each turn of the game the player can select any two of the slimes and merge them together.
// The game ends when there is only one slime left.
// 
// Each slime has a positive integer size.
// Whenever the player merges two slimes, the size of the merged slime is x+y, where x and y are the sizes of the two merged slimes.
// Additionally, the player is awarded x*y mascots for performing this merge.
// 
// Ami and Mami have just started a new game.
// You are given a vector <int> a containing the initial sizes of all slimes.
// Ami and Mami really like mascots.
// Find and return the maximum total number of mascots they can obtain during the game.
// 
// 
// DEFINITION
// Class:CombiningSlimes
// Method:maxMascots
// Parameters:vector <int>
// Returns:int
// Method signature:int maxMascots(vector <int> a)
// 
// 
// CONSTRAINTS
// -a will contain between 2 and 100 elements, inclusive.
// -Each element of a will be between 1 and 100, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {3,4}
// 
// Returns: 12
// 
// There are two slimes, their sizes are 3 and 4.
// There is only one possible move: we merge them into a single slime of size 7.
// Doing so gives us 3*4 = 12 mascots.
// 
// 1)
// {2,2,2}
// 
// Returns: 12
// 
// In the first turn we will merge any two slimes.
// The size of the new slime will be 2+2 = 4, and we will gain 2*2 = 4 mascots.
// In the second turn we will merge the two remaining slimes.
// The size of the final slime will be 4+2 = 6.
// The second merge will give us 4*2 = 8 mascots.
// Hence, the total number of mascots we will obtain is 4 + 8 = 12.
// 
// 2)
// {1,2,3}
// 
// Returns: 11
// 
// One optimal solution looks as follows:
// First, merge slimes of sizes 1 and 3.
// This produces a slime of size 4, and we get 3 mascots.
// Then, merge slimes of sizes 4 and 2.
// This produces a slime of size 6, and we get 8 mascots.
// 
// 3)
// {3,1,2}
// 
// Returns: 11
// 
// The set of slimes is the same as in Example 2, therefore the correct answer is also the same.
// As we can merge any two slimes, their order in a does not matter.
// 
// 4)
// {7,6,5,3,4,6}
// 
// Returns: 395
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
