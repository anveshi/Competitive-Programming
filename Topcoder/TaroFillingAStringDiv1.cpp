#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;

vector < pair<int,char> > v;
class TaroFillingAStringDiv1 {
public:
	int getNumber(int N, vector <int> position, string value) {
		v.clear();
		for(int i=0;i<N;i++)v.push_back(make_pair(position[i],value[i]));
		sort(v.begin(),v.end());
		LL ans=1LL;
		for(int i=0;i<N-1;i++){
			LL y = v[i+1].first;
			LL x = v[i].first;
			if(v[i].second==v[i+1].second){
				if((y-x-1)%2==0)ans*=2LL;
			}
			else{
				if((y-x-1)%2==1)ans*=2LL;
			}
		}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, string p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "\"" << p2 << "\"";
	cout << "]" << endl;
	TaroFillingAStringDiv1 *obj;
	int answer;
	obj = new TaroFillingAStringDiv1();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	string p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 3;
	int t1[] = {1,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "AB";
	p3 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	int t1[] = {2,1,3,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "ABBA";
	p3 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 25;
	int t1[] = {23,4,8,1,24,9,16,17,6,2,25,15,14,7,13};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "ABBBBABABBAAABA";
	p3 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 305;
	int t1[] = {183,115,250,1,188,193,163,221,144,191,92,192,58,215,157,187,227,177,206,15,272,232,49,11,178,59,189,246};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "ABAABBABBAABABBBBAAAABBABBBA";
	p3 = 43068480;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Cat Taro likes strings.
// He is currently constructing a string S of length N.
// Each character of S will be either 'A' or 'B'.
// Taro has already chosen some of the characters.
// You are given these choices as a vector <int> position and a string value.
// For each valid i, the character at the 1-based index position[i] in S is the character value[i].
// 
// 
// 
// 
// To Taro, the ugliness of a string is the number of pairs of equal consecutive characters.
// For example, the ugliness of "ABABAABBB" is 3: there is one pair "AA" and two (overlapping) pairs "BB".
// 
// 
// 
// 
// Taro now wants to finish S by filling in the remaining characters.
// His goal is to create a string with the smallest possible ugliness.
// Let X be the number of possible strings Taro may produce.
// Return the value (X modulo 1,000,000,007).
// 
// 
// DEFINITION
// Class:TaroFillingAStringDiv1
// Method:getNumber
// Parameters:int, vector <int>, string
// Returns:int
// Method signature:int getNumber(int N, vector <int> position, string value)
// 
// 
// CONSTRAINTS
// -N will be between 1 and 1,000,000,000, inclusive.
// -position will contian between 1 and 50 elements, inclusive.
// -value and position will contain the same number of elements.
// -Each element of position will be between 1 and N, inclusive.
// -All elements of position will be distinct.
// -value will consist only of characters 'A' and 'B'.
// 
// 
// EXAMPLES
// 
// 0)
// 3
// {1, 3}
// "AB"
// 
// Returns: 2
// 
// Currently, Taro's string looks as follows: A_B.
// He can either produce the string AAB or the string ABB.
// Both have the same ugliness.
// 
// 1)
// 4
// {2, 1, 3, 4}
// "ABBA"
// 
// Returns: 1
// 
// All characters of S have already been chosen.
// 
// 2)
// 25
// {23, 4, 8, 1, 24, 9, 16, 17, 6, 2, 25, 15, 14, 7, 13}
// "ABBBBABABBAAABA"
// 
// Returns: 1
// 
// 
// 
// 3)
// 305
// {183, 115, 250, 1, 188, 193, 163, 221, 144, 191, 92, 192, 58, 215, 157, 187, 227, 177, 206, 15, 272, 232, 49, 11, 178, 59, 189, 246}
// "ABAABBABBAABABBBBAAAABBABBBA"
// 
// Returns: 43068480
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
