#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;


class BridgeBuildingDiv2 {
public:
	int minDiameter(vector <int> a, vector <int> b, int K) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	BridgeBuildingDiv2 *obj;
	int answer;
	obj = new BridgeBuildingDiv2();
	clock_t startTime = clock();
	answer = obj->minDiameter(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	int t0[] = {2,1,1,1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,9,1,9,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	p3 = 6;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,50,1,50,1,50,1,50};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {50,1,50,1,50,1,50,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 9;
	p3 = 8;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {50,10,15,31,20,23,7,48,5,50};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,5,1,8,3,2,16,11,9,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = 124;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {2,4,10,2,2,22,30,7,28};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {5,26,1,2,6,2,16,3,15};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	p3 = 54;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// You have two rows of nodes.
// Each row contains N nodes, numbered 0 through N-1 from the left to the right.
// 
// 
// 
// Within each row, adjacent nodes are already connected by edges.
// You are given the lengths of these edges as vector <int>s a and b, each containing N-1 elements.
// For each valid i, a[i] is the length of the edge between nodes i and (i+1) in the top row, and b[i] is the length of the edge between nodes i and (i+1) in the bottom row.
// 
// 
// 
// You want to add exactly K new edges to this graph.
// Each of the new edges must be vertical -- i.e., it must connect some vertex i in the top row to the vertex i in the bottom row.
// All new edges will have length 0.
// 
// 
// 
// By adding the K new edges we will produce a connected graph.
// The diameter of this graph is the maximum of all shortest distances among pairs of its nodes.
// In other words, the diameter is the smallest number D such that it is possible to travel from any node to any other node using a path of length D or less.
// 
// 
// 
// Given a, b, and the int K, compute and return the smallest possible diameter of the resulting graph.
// 
// 
// DEFINITION
// Class:BridgeBuildingDiv2
// Method:minDiameter
// Parameters:vector <int>, vector <int>, int
// Returns:int
// Method signature:int minDiameter(vector <int> a, vector <int> b, int K)
// 
// 
// CONSTRAINTS
// -N will be between 2 and 11, inclusive.
// -a,b will contain exactly N-1 elements each.
// -K will be between 1 and N, inclusive.
// -Each element of a,b will be between 1 and 50, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {2,1,1,1,2}
// {1,9,1,9,1}
// 4
// 
// Returns: 6
// 
// 
// One example of an optimal solution is to draw the bridges as follows:
// 
// 
// 
// 
// 1)
// {1,50,1,50,1,50,1,50}
// {50,1,50,1,50,1,50,1}
// 9
// 
// Returns: 8
// 
// 
// 
// 2)
// {50,10,15,31,20,23,7,48,5,50}
// {2,5,1,8,3,2,16,11,9,1}
// 3
// 
// Returns: 124
// 
// 
// 
// 3)
// {2,4,10,2,2,22,30,7,28}
// {5,26,1,2,6,2,16,3,15}
// 5
// 
// Returns: 54
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
