#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;


class NineEasy {
public:
	int count(int N, vector <int> d) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	NineEasy *obj;
	int answer;
	obj = new NineEasy();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 2;
	int t1[] = {1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	int t1[] = {3,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 12;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 2;
	int t1[] = {1,3,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 16;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 5;
	int t1[] = {1,2,4,8,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 893703876;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 1;
	int t1[] = {0,0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 200;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Bob's little sister Alice is nine years old.
// Bob is testing her mathematical prowess by asking her to compute the remainder a number gives when divided by 9.
// 
// 
// 
// Today, Bob gave Alice exactly N such questions.
// We will number the questions 0 through N-1.
// In each question, Bob gave Alice the same M-digit number.
// (Note that Bob's number is allowed to have some leading zeros.)
// 
// 
// 
// In some of those cases Alice may have skipped some of the digits when reading the number.
// However, she never made any other mistakes in her calculations
// For example, if Bob gave Alice the number 012345 three times, she may have read it as 0145 the first time, 012345 the second time, and 135 the third time.
// Then, her answers would be 145 modulo 9 = 1, 12345 modulo 9 = 6, and 135 modulo 9 = 0.
// 
// 
// 
// You are given the int N and a vector <int> d with M elements.
// For each i, the number d[i] corresponds to the digit of the order 10^i in Bob's number.
// For each i and j, Alice read digit i when answering question j if and only if bit number j of the number d[i] is 1.
// 
// 
// 
// For example, suppose that d[3] = 6.
// In binary, 6 is 110.
// In other words, the binary digits number 0, 1, and 2 are 0, 1, and 1.
// Hence, Alice skipped the corresponding digit in question 0 but she read it in questions 1 and 2.
// 
// 
// 
// A surprising thing happened in today's experiment:
// For each of the N questions, Alice's answer was that the remainder is 0.
// Bob found that interesting.
// He now wonders: given N and d, how many different M-digit numbers have this property?
// 
// 
// 
// Let X be the answer to Bob's question.
// Compute and return the value (X modulo 1,000,000,007).
// 
// 
// DEFINITION
// Class:NineEasy
// Method:count
// Parameters:int, vector <int>
// Returns:int
// Method signature:int count(int N, vector <int> d)
// 
// 
// CONSTRAINTS
// -N will be between 1 and 5, inclusive.
// -The number of elements in d will be between 1 and 20, inclusive.
// -All elements in d must be between 0 and 2N-1, inclusive
// -d will be such that in each question Alice will read at least one digit.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// {1,2}
// 
// Returns: 4
// 
// In this case we have N=2 questions and Bob's number has two digits.
// When processing question 0, Alice only reads digit 0 (the last digit of the number).
// As her answer is that the remainder is 0, this digit must be either 0 or 9.
// When processing question 1, Alice only reads digit 1 (the first digit of the number).
// As her answer is that the remainder is 0 again, this digit must also be either 0 or 9.
// Thus there are four possible numbers: 00, 09, 90, and 99.
// 
// 1)
// 2
// {3,3}
// 
// Returns: 12
// 
// Again, we have N=2 questions and Bob's number has two digits.
// This time Alice in each question reads both digits.
// Thus the only information we have is that Bob's entire number is divisible by 9.
// There are 12 such numbers:
// 00, 09, 18, 27, ..., 90, and 99.
// 
// 2)
// 2
// {1,3,2}
// 
// Returns: 16
// 
// 
// 
// 3)
// 5
// {1,2,4,8,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31}
// 
// Returns: 893703876
// 
// 
// 
// 4)
// 1
// {0,0,1}
// 
// Returns: 200
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
