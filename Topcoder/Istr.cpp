#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class Istr {
public:
	int count(string s, int k) {
		int cnt[50];
		for(int i=0;i<50;i++){
			cnt[i] = 0;
		}
		for(int i=0;i<s.length();i++){
			cnt[s[i]-'a']++;
		}
		for(int i=0;i<k;i++){
			int t = 0;
			for(int j=0;j<50;j++){
				if(cnt[j] > cnt[t]){
					t = j;
				}
			}
			if(cnt[t] > 0)
				cnt[t]--;
		}
		int Ans = 0;
		for(int i=0;i<50;i++){
			Ans += cnt[i]*cnt[i];
		}
		return Ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
	cout << "]" << endl;
	Istr *obj;
	int answer;
	obj = new Istr();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = "aba";
	p1 = 1;
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "abacaba";
	p1 = 0;
	p2 = 21;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "abacaba";
	p1 = 1;
	p2 = 14;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "abacaba";
	p1 = 3;
	p2 = 6;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "abc";
	p1 = 3;
	p2 = 0;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "wersrsresesrsesrawsdsw";
	p1 = 11;
	p2 = 23;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Hero came up with an interesting way to calculate the value of any string.
// It works as follows:
// 
// Find all distinct characters that appear in the string.
// For each of those characters, count the number of occurrences.
// Square each of those counts.
// Sum all those squares to get the value of the string.
// 
// 
// For example, suppose Hero has the string "abacaba".
// This string contains 4 'a's, 2 'b's, and 1 'c'.
// Thus, its value is 4*4 + 2*2 + 1*1 = 21.
// 
// You are given a string s and an int k.
// You are allowed to remove at most k characters from s.
// Your goal is to produce a string with the smallest possible value.
// Compute and return that value.
// 
// DEFINITION
// Class:Istr
// Method:count
// Parameters:string, int
// Returns:int
// Method signature:int count(string s, int k)
// 
// 
// CONSTRAINTS
// -s will contain between 1 and 50 characters, inclusive.
// -Each character in s will be a lowercase letter ('a'-'z').
// -k will be between 0 and the length of s, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// "aba"
// 1
// 
// Returns: 2
// 
// The optimal strategy is to erase one of the two 'a's.
// This produces a string with value 1*1 + 1*1 = 2.
// 
// 1)
// "abacaba"
// 0
// 
// Returns: 21
// 
// 
// 
// 2)
// "abacaba"
// 1
// 
// Returns: 14
// 
// 
// 
// 3)
// "abacaba"
// 3
// 
// Returns: 6
// 
// 
// 
// 4)
// "abc"
// 3
// 
// Returns: 0
// 
// 
// 
// 5)
// "wersrsresesrsesrawsdsw"
// 11
// 
// Returns: 23
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
