#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;


class ColorfulCupcakesDivTwo {
public:
	int countArrangements(string cupcakes) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	ColorfulCupcakesDivTwo *obj;
	int answer;
	obj = new ColorfulCupcakesDivTwo();
	clock_t startTime = clock();
	answer = obj->countArrangements(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "ABAB";
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "ABABA";
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "ABC";
	p1 = 6;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "ABABABABABABABABABABABABABABABABABABABABABABABABAB";
	p1 = 2;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "BCBABBACBABABCCCCCAABBAACBBBBCBCAAA";
	p1 = 741380640;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Beaver Bindu has N cupcakes.
// Each cupcake has one of three possible colors.
// In this problem we will represent the colors by uppercase letters 'A', 'B', and 'C'.
// Two cupcakes of the same color are indistinguishable.
// You are given a string cupcakes consisting of exactly N characters.
// Each character in cupcakes gives the color of one of Bindu's cupcakes.
// 
// 
// Bindu has N friends, sitting around a round table.
// She wants to give each friend one of the cupcakes.
// Moreover, she does not want to give cupcakes of the same color to any pair of friends who sit next to each other.
// 
// 
// Let X be the number of ways in which she can hand out the cupcakes to her friends.
// As X can be very large, compute and return the value (X modulo 1,000,000,007).
// 
// DEFINITION
// Class:ColorfulCupcakesDivTwo
// Method:countArrangements
// Parameters:string
// Returns:int
// Method signature:int countArrangements(string cupcakes)
// 
// 
// NOTES
// -Formally, Bindu's friends can be labeled 0 through N-1 in such a way that friends i and (i+1 modulo N) are adjacent, for each i.
// 
// 
// CONSTRAINTS
// -cupcakes will contain between 3 and 50 characters, inclusive.
// -Each character in cupcakes will be either 'A', 'B', or 'C'.
// 
// 
// EXAMPLES
// 
// 0)
// "ABAB"
// 
// Returns: 2
// 
// The two valid ways of handing out the cupcakes are "ABAB" and "BABA".
// (I.e., in the first way, friends 0 and 2 will receive cupcake of color A; and friends 1 and 3 will receive cupcake of color B.
// The second way is exactly opposite.)
// 
// 
// 1)
// "ABABA"
// 
// Returns: 0
// 
// Regardless of how she hands out the cupcakes, there will always be a pair of adjacent friends who both received a cupcake of color A.
// Hence, there are no valid arrangements of cupcakes.
// 
// 
// 2)
// "ABC"
// 
// Returns: 6
// 
// Each of the six permutations of "ABC" corresponds to a valid arrangement.
// 
// 3)
// "ABABABABABABABABABABABABABABABABABABABABABABABABAB"
// 
// Returns: 2
// 
// 
// 
// 4)
// "BCBABBACBABABCCCCCAABBAACBBBBCBCAAA"
// 
// Returns: 741380640
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
