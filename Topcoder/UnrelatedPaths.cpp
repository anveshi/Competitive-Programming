#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;


class UnrelatedPaths {
public:
	int maxUnrelatedPaths(vector <int> parent) {
		int sz;sz = parent.size();
		if(sz==0)return 1;
		if(sz==1)return 1;
		else{
			int a[55],i;
			for(i=0;i<55;i++)a[i]=0;
			//int sz;sz = parent.size();
			for(i=0;i<sz;i++)
				a[parent[i]]=1;
			int ans=0;
			for(i=0;i<=sz;i++)
				if(a[i]==0)ans++;
			return ans;
		}
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	UnrelatedPaths *obj;
	int answer;
	obj = new UnrelatedPaths();
	clock_t startTime = clock();
	answer = obj->maxUnrelatedPaths(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {0,1,1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,0,1,1,2,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0,1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {0,1,1,2,2,2,4,6,5,0,10,5,12,12,10,4,16,12,5,3,20,12,11,21,9,5,1,20,15,24,6,8,15};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 17;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {0,1,1,1,1,0,2,5,1,6,7,10,5,10,8,5,16,14,8,14,4,14,15,21,0,24,11,1,9,18,13,20,6,28,19,28,14,11,38,26,25,10,23,43};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 19;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// This problem is about paths on a tree.
// A path is any sequence of one or more vertices such that all the vertices are distinct and each pair of consecutive vertices is connected by an edge of the tree.
// 
// 
// 
// 
// 
// Our tree is a rooted tree with N+1 vertices, labeled 0 through N.
// The label of the root is 0.
// For each i, the parent of vertex i has a number smaller than i.
// You are given the description of the tree: a vector <int> parent with N elements.
// For each i, the vertex parent[i] is the parent of the vertex i+1.
// 
// 
// 
// 
// 
// The vertex u is an ancestor of the vertex v if u lies on the (only) path that connects v to the root.
// Note that each vertex is its own ancestor.
// Also note that the root is an ancestor of all other vertices.
// 
// 
// 
// 
// 
// Two paths A and B in our tree are said to be related if path A contains a vertex u and path B contains a vertex v such that one of u, v is an ancestor of the other.
// 
// 
// 
// 
// 
// We want to choose many paths in such a way that no two of them will be related.
// Find and return the largest possible number of pairwise unrelated paths in the given tree.
// 
// 
// DEFINITION
// Class:UnrelatedPaths
// Method:maxUnrelatedPaths
// Parameters:vector <int>
// Returns:int
// Method signature:int maxUnrelatedPaths(vector <int> parent)
// 
// 
// CONSTRAINTS
// -N will be between 0 and 50, inclusive.
// -parent will contain exactly N elements.
// -For each i, parent[i] will be between 0 and i, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {0, 1, 1, 2, 3}
// 
// Returns: 2
// 
// The vector <int> parent tells us the following information:
// 
// The parent of vertex 1 is vertex 0.
// The parent of vertex 2 is vertex 1.
// The parent of vertex 3 is vertex 1.
// The parent of vertex 4 is vertex 2.
// The parent of vertex 5 is vertex 3.
// 
// In this tree it is possible to select two unrelated paths.
// One possible way of doing so is to select the paths 4-2 and 3-5.
// 
// 1)
// {0, 0, 1, 1, 2, 2}
// 
// Returns: 4
// 
// 
// 
// 2)
// {0, 1, 2, 3}
// 
// Returns: 1
// 
// 
// 
// 3)
// {0,1,1,2,2,2,4,6,5,0,10,5,12,12,10,4,16,12,5,3,20,12,11,21,9,5,1,20,15,24,6,8,15}
// 
// 
// Returns: 17
// 
// 
// 
// 4)
// {0,1,1,1,1,0,2,5,1,6,7,10,5,10,8,5,16,14,8,14,4,14,15,21,0,24,11,1,9,18,13,20,6,28,19,28,14,11,38,26,25,10,23,43}
// 
// 
// Returns: 19
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
