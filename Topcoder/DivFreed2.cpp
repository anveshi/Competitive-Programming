#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;
const int Maxn = 100005;
long long dp[10][Maxn];
const int Mod = 1000000007;
class DivFreed2 {

public:
	int count(int n, int k) {
		
		for(int i=1;i<=k;i++){
			dp[0][i] = 1; 
		}

		long long row = k;
		for(int i=1;i<n;i++){
			long long pre = 0;
			long long nrow = 0LL;
			for(int j=1;j<=k;j++){
				pre += dp[i-1][j];
				pre %= Mod;
				long long temp = 0;
				for(int t=2*j;t<=k;t+=j){
					temp = temp + dp[i-1][t];
					temp %= Mod;
				}
				long long t1 = (row - pre + 10LL*Mod)%Mod ;
				t1 = (t1 - temp + 10LL*Mod)%Mod;
				dp[i][j] = (pre + t1)%Mod;
				nrow = nrow + dp[i][j];
				nrow %= Mod;
			}
			row = nrow;
		}
		long long Ans = 0LL;
		for(int i=1;i<=k;i++){
			Ans += dp[n-1][i];
			Ans %= Mod;
		}
		return Ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	DivFreed2 *obj;
	int answer;
	obj = new DivFreed2();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 2;
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 9;
	p1 = 1;
	p2 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 3;
	p2 = 15;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1;
	p1 = 107;
	p2 = 107;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 2;
	p1 = 10;
	p2 = 83;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 2;
	p1 = 1234;
	p2 = 1515011;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 3;
	p1 = 8;
	p2 = 326;
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	p0 = 10;
	p1 = 100000;
	p2 = 526882214;
	all_right = KawigiEdit_RunTest(7, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Hero likes some arrays. The arrays he likes are the arrays that have all of the following properties:
// 
// The length of the array is n.
// Each element is an integer between 1 and k, inclusive.
// Whenever A and B are two consecutive elements of the array (in this order), we have (A <= B) or (A mod B != 0).
// 
// 
// For example, suppose n=4 and k=7.
// Hero will like the array {1,7,7,2} because it has the right length, all elements are in the correct range, 1 <= 7, 7 <= 7, and 7 mod 2 != 0.
// Hero will not like the array {4,4,4,2}.
// 
// You are given the ints n and k.
// Let X be the number of different arrays Hero likes.
// Compute and return the value (X mod 1,000,000,007).
// 
// DEFINITION
// Class:DivFreed2
// Method:count
// Parameters:int, int
// Returns:int
// Method signature:int count(int n, int k)
// 
// 
// CONSTRAINTS
// -n will be between 1 and 10, inclusive.
// -k will be between 1 and 100,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 2
// 
// Returns: 3
// 
// The three arrays Hero likes are {1,1}, {1,2}, and {2,2}.
// 
// 1)
// 9
// 1
// 
// Returns: 1
// 
// The only array Hero likes is {1,1,1,1,1,1,1,1,1}.
// 
// 2)
// 3
// 3
// 
// Returns: 15
// 
// 
// 
// 3)
// 1
// 107
// 
// Returns: 107
// 
// 
// 
// 4)
// 2
// 10
// 
// Returns: 83
// 
// 
// 
// 5)
// 2
// 1234
// 
// Returns: 1515011
// 
// 
// 
// 6)
// 3
// 8
// 
// Returns: 326
// 
// 
// 
// 7)
// 10
// 100000
// 
// Returns: 526882214
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
