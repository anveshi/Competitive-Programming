#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;


class SquareScoresDiv2 {
public:
	int getscore(string s) {
		int n = s.length();
		int ans=0,temp=1;
		for(int i=0;i<n;i++){
			if(i==0)temp=1;
			else if(s[i]==s[i-1])temp++;
			else temp=1;
			ans+=temp;
		}
		return ans;			
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	SquareScoresDiv2 *obj;
	int answer;
	obj = new SquareScoresDiv2();
	clock_t startTime = clock();
	answer = obj->getscore(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "aaaba";
	p1 = 8;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "zzzxxzz";
	p1 = 12;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "abcdefghijklmnopqrstuvwxyz";
	p1 = 26;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "p";
	p1 = 1;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
	p1 = 5050;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// A substring of a string is a contiguous sequence of characters from the string.
// For example, each of the strings "ab", "bcd", and "e" is a substring of "abcde". 
// On the other hand, "cba", "ace", and "f" are not substrings of "abcde".
// 
// 
// The score of a string S is the number of ways in which we can select a non-empty substring of S such that all characters in the substring are the same.
// If two substrings consist of the same letters but occur at different places in S, they are still considered different.
// For example, the score of "aaaba" is 8: there are four occurrences of the substring "a", two occurrences of "aa", one occurrence of "aaa", and one of "b".
// 
// 
// On her birthday, Maki got a string s from her friend Niko as a present.
// Calculate and return its score.
// 
// 
// 
// DEFINITION
// Class:SquareScoresDiv2
// Method:getscore
// Parameters:string
// Returns:int
// Method signature:int getscore(string s)
// 
// 
// CONSTRAINTS
// -The length of s will be between 1 and 100, inclusive.
// -Each character in s will be a lowercase letter ('a'-'z').
// 
// 
// EXAMPLES
// 
// 0)
// "aaaba"
// 
// Returns: 8
// 
// The example explained above.
// 
// 1)
// "zzzxxzz"
// 
// Returns: 12
// 
// 
// 
// 2)
// "abcdefghijklmnopqrstuvwxyz"
// 
// Returns: 26
// 
// 
// 
// 3)
// "p"
// 
// Returns: 1
// 
// 
// 
// 4)
// "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
// 
// Returns: 5050
// 
// All substrings satisfy the condition.
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
