#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;



class Truckloads {
public:
	int numTrucks(int numCrates, int loadSize) {
		int x = fun(numCrates,loadSize);
		return x; 
	}
	int fun(int a,int b){
		if(a==0)return 0;
		if(a<=b)return 1;
		return fun(a/2,b)+fun((a+1)/2,b);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	Truckloads *obj;
	int answer;
	obj = new Truckloads();
	clock_t startTime = clock();
	answer = obj->numTrucks(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 14;
	p1 = 3;
	p2 = 6;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 15;
	p1 = 1;
	p2 = 15;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1024;
	p1 = 5;
	p2 = 256;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// We have a pile of crates at our warehouse that we want to load onto trucks.
// Our plan is to divide the pile in half forming two smaller piles, then continuing
// dividing each of the small piles in half until we get piles that will fit on a 
// truck. (Of course, when we divide an odd number of crates in "half", one of the 
// resulting piles will have one more crate than the other.) Our problem is to 
// determine how many trucks we will need to ship the crates.
// 
// Create a class Truckloads that contains a method numTrucks that is given numCrates 
// (the number of crates at the warehouse) and loadSize (the maximum number of
// crates that will fit in a truck) and that returns the number of trucks required.
// 
// 
// 
// DEFINITION
// Class:Truckloads
// Method:numTrucks
// Parameters:int, int
// Returns:int
// Method signature:int numTrucks(int numCrates, int loadSize)
// 
// 
// CONSTRAINTS
// -numCrates will be between 2 and 10,000, inclusive.
// -loadSize loadSize will be be between 1 and (numCrates - 1), inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 14
// 3
// 
// Returns: 6
// 
// 
// 
//    After the first division we have two piles each with 7 crates. Each of these
//    piles must be divided giving us 2 piles of 3 and 2 piles of 4. The piles 
//    with 4 crates must be further divided giving us 2 piles of 3 and 4 piles of 2.
//    Each of these piles fits into a truck, so we need 6 trucks.
// 
// 
// 
// 
// 
// 1)
// 15
// 1
// 
// Returns: 15
// 
// 
// 
//    We will eventually end up with 15 piles, each with just 1 crate.
// 
// 2)
// 1024
// 5
// 
// Returns: 256
// 
// 
// 
//    1024 divides in half very nicely. We eventually end up with 256 piles, each
//    containing 4 crates.
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
