#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;


class OneEntrance {
public:
	int count(vector <int> a, vector <int> b, int s) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	OneEntrance *obj;
	int answer;
	obj = new OneEntrance();
	clock_t startTime = clock();
	answer = obj->count(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	int t0[] = {0,1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	p3 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	p3 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0,0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	p3 = 24;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {7,4,1,0,1,1,6,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {6,6,2,5,0,3,8,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	p3 = 896;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0.clear() /*{}*/;
	p1.clear() /*{}*/;
	p2 = 0;
	p3 = 1;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// There are N rooms in Maki's new house.
// The rooms are numbered from 0 to N-1.
// Some pairs of rooms are connected by bidirectional passages.
// The passages have the topology of a tree.
// That is, there are exactly N-1 of them and it is possible to go from any room to any other room by following some sequence of passages.
// 
// 
// You are given two vector <int>s a and b that describe the passages.
// For each valid i, there is a passage that connects the rooms a[i] and b[i].
// You are also given an int s.
// The house has exactly one entrance from the outside, and the entrance leads to the room s.
// 
// 
// Niko is helping Maki move into the new house.
// Maki has exactly N pieces of furniture.
// The pieces are numbered from 0 to N-1.
// Niko will carry them into the house in this order.
// Each piece of furniture must be placed into a different room.
// Maki does not care which piece goes where, each of the N! permutations is allowed.
// 
// 
// However, not all of those N! permutations are actually possible.
// This is because the furniture is large.
// As soon as a room contains a piece of furniture, it is impossible to move other pieces through this room.
// Thus, Niko must place the furniture carefully.
// Formally, she can place a new piece of furniture into the room x if and only if all rooms on the (unique) path between s and x, including s and x, are still empty.
// Niko is smart and she will always place the furniture in such a way that she never gets stuck.
// Thus, at the end each of Maki's rooms will contain exactly one piece of furniture.
// 
// 
// Calculate and return the number of ways how the furniture can be arranged in Maki's house at the end.
// 
// 
// DEFINITION
// Class:OneEntrance
// Method:count
// Parameters:vector <int>, vector <int>, int
// Returns:int
// Method signature:int count(vector <int> a, vector <int> b, int s)
// 
// 
// CONSTRAINTS
// -N will be between 1 and 9, inclusive.
// -a and b will contain exactly N-1 elements each.
// -Each element of a and b will be between 0 and N-1, inclusive.
// -The graph described by a and b will be a tree.
// -s will be between 0 and N-1, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {0, 1, 2}
// {1, 2, 3}
// 0
// 
// Returns: 1
// 
// There is only one solution: Niko must fill the rooms in the order {3,2,1,0}.
// Thus, piece number 0 will end in room 3, piece number 1 in room 2, and so on.
// 
// 1)
// {0, 1, 2}
// {1, 2, 3}
// 2
// 
// Returns: 3
// 
// In this case Niko can choose one of three orders: {3,0,1,2}, {0,3,1,2}, or {0,1,3,2}.
// Note that the room with the entrance (in this case, room 2) always gets the last piece of furniture.
// 
// 2)
// {0, 0, 0, 0}
// {1, 2, 3, 4}
// 0
// 
// Returns: 24
// 
// 
// 
// 3)
// {7, 4, 1, 0, 1, 1, 6, 0}
// {6, 6, 2, 5, 0, 3, 8, 4}
// 4
// 
// Returns: 896
// 
// 
// 
// 4)
// {}
// {}
// 0
// 
// Returns: 1
// 
// Maki's new house has only one room.
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
