#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;


class Flee {
  public:
    const double EPS = 0.00000000000001;
    typedef struct point{
      int x,	 y;
    }point;
    double dist(point p1, point p2){
      LL z;
      z = (p1.x-p2.x)*(p1.x-p2.x) + (p1.y-p2.y)*(p1.y-p2.y);
      double ret = sqrt(z);
      return ret;
    }
    long long Aarea(point A, point B, point C){
      int AB[2], AC[2];
      AB[0] = B.x-A.x;
      AB[1] = B.y-A.y;
      AC[0] = C.x-A.x;
      AC[1] = C.y-A.y;
      int cross = AB[0] * AC[1] - AB[1] * AC[0];
      return fabs(cross);
    }
    long long Area(point p1, point p2, point p3){
      int x1,x2,y1,y2,x3,y3;
      x1 = p1.x;x2=p2.x;x3=p3.x;
      y1 = p1.y;y2=p2.y;y3=p3.y;
      return abs((x1*(y2-y3) + x2*(y3-y1)+ x3*(y1-y2)));
    }
    double maximalSafetyLevel(vector <int> x, vector <int> y) {
      point p0,p1,p2,p3;
      p0.x = 0;
      p0.y = 0;
      p1.x = x[0];
      p1.y = y[0];
      if(x.size()>1){
        p2.x = x[1];
        p2.y = y[1];
      }
      if(x.size()>2){
        p3.x = x[2];
        p3.y = y[2];
      }
      if(x.size()==1){
        return dist(p0,p1);
      }
      else if(x.size()==2){
        return min(dist(p0, p1),dist(p0, p2));
      }
      else{
        if((Area(p0,p1,p2)+Area(p0,p2,p3)+Area(p0,p3,p1) == Area(p1,p2,p3))&& (Area(p1,p2,p3)>EPS)){
          double ans = dist(p1,p2);
          ans = max(ans, dist(p2,p3));
          ans = max(ans, dist(p3,p1));
          ans = ans/2.0;
          ans = min(ans,dist(p0,p1));
          ans = min(ans,dist(p0,p2));
          ans = min(ans,dist(p0,p3));
          //cout << "ander\n";
          return ans;
        }
        else{
          //cout << "bahar" << endl;
          return min(min(dist(p0,p1), dist(p0,p2)),dist(p0,p3));
        }
      }
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, double p2) {
  cout << "Test " << testNum << ": [" << "{";
  for (int i = 0; int(p0.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p0[i];
  }
  cout << "}" << "," << "{";
  for (int i = 0; int(p1.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p1[i];
              }
              cout << "}";
              cout << "]" << endl;
              Flee *obj;
              double answer;
              obj = new Flee();
              clock_t startTime = clock();
              answer = obj->maximalSafetyLevel(p0, p1);
              clock_t endTime = clock();
              delete obj;
              bool res;
              res = true;
              cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
              if (hasAnswer) {
                cout << "Desired answer:" << endl;
                cout << "\t" << p2 << endl;
              }
              cout << "Your answer:" << endl;
              cout << "\t" << answer << endl;
              if (hasAnswer) {
                res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
              }
              if (!res) {
                cout << "DOESN'T MATCH!!!!" << endl;
              } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
                cout << "FAIL the timeout" << endl;
                res = false;
              } else if (hasAnswer) {
                cout << "Match :-)" << endl;
              } else {
                cout << "OK, but is it right?" << endl;
              }
              cout << "" << endl;
              return res;
              }
int main() {
  bool all_right;
  all_right = true;

  vector <int> p0;
  vector <int> p1;
  double p2;

  {
    // ----- test 0 -----
    int t0[] = {1,1,-7};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {5,-5,0};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 5.0;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 1 -----
    int t0[] = {1,1};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {-5,-5};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 5.0990195135927845;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 2 -----
    int t0[] = {1,1,-8};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {5,-5,0};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 5.0990195135927845;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 3 -----
    int t0[] = {232,312,-432};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {498,-374,24};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 432.6661530556787;
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 4 -----
    int t0[] = {0};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {0};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 0.0;
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------
  }

  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// You are a point in the plane.
// You start at the coordinates (0, 0) and you want to flee far away, to the coordinates (10^100, 0).
// Your path can be any continuous curve.
// 
// 
// You are given vector <int>s x and y.
// For each valid i, there is a guard standing on the point with coordinates (x[i], y[i]).
// The guards do not move.
// You want to avoid the guards as much as possible.
// 
// 
// Formally, for any point P in the plane, we define its safety level S(P) as the distance to the closest guard.
// The safety level of a path is the minimum safety level of a point on the path.
// Find a path with the largest possible safety level and return its safety level.
// 
// DEFINITION
// Class:Flee
// Method:maximalSafetyLevel
// Parameters:vector <int>, vector <int>
// Returns:double
// Method signature:double maximalSafetyLevel(vector <int> x, vector <int> y)
// 
// 
// NOTES
// -Your return value must have an absolute or a relative error smaller than 1e-9.
// 
// 
// CONSTRAINTS
// -x will contain between 1 and 3 elements, inclusive.
// -x and y will contain the same number of elements.
// -Each element in x and y will be between -1,000 and 1,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1,1,-7}
// {5,-5,0}
// 
// Returns: 5.0
// 
// You can go from (0, 0) to (10^100, 0) directly.
// The safety level of this path is 5, because when you are at (1, 0) the distance to the closest guard is 5.
// 
// 1)
// {1,1}
// {-5,-5}
// 
// Returns: 5.0990195135927845
// 
// One optimal path is the following polyline:
// (0, 0) -- (-100, 0) -- (-100, -10000) -- (10^100, 0).
// 
// 2)
// {1,1,-8}
// {5,-5,0}
// 
// Returns: 5.0990195135927845
// 
// 
// 
// 3)
// {232,312,-432}
// {498,-374,24}
// 
// Returns: 432.6661530556787
// 
// 
// 
// 4)
// {0}
// {0}
// 
// Returns: 0.0
// 
// Each valid path starts in the point (0, 0).
// This point contains a guard and therefore its safety level is 0.
// Hence, the safety level of any valid path will be 0.
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
