#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long int
#define pb push_back
#define mp make_pair

using namespace std;


class DevuAndPlantingTrees {
public:
	int maximumTreesDevuCanGrow(vector <string> garden) {
		int a[55],b[55],c[55],i;
		for(i=0;i<55;i++){
			a[i]=i%2;
			b[i]=1-a[i];
			c[i]=0;
		}
		int n;
		n = garden[0].size();
		vector <int> v;v.clear();v.pb(-2);
		int ans = 0;
		for(i=0;i<n;i++){
			if(garden[0][i]=='*' || garden[1][i]=='*'){
				c[i]=1;
				v.pb(i);ans++;
			}
		}
		v.pb(n+1);
		int sz = v.size();
		for(i=0;i<sz-1;i++){
			int d;
			d = v[i+1]-v[i]-1;
			if(d>2)
				ans+=(d-1)/2;
		}
		return ans;
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	DevuAndPlantingTrees *obj;
	int answer;
	obj = new DevuAndPlantingTrees();
	clock_t startTime = clock();
	answer = obj->maximumTreesDevuCanGrow(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"..",".."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"..",".*"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"...","..*"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {".....*..........",".*.......*.*..*."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"....*.*.*...........*........","*..........*..*.*.*....*...*."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 13;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {".....*..*..........*............................*","*..*.............*...*.*.*.*..*.....*.*...*...*.."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 23;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"....","...."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	string t0[] = {".....","....."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 8 -----
	string t0[] = {"..*..","..*.*"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(8, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Devu has a garden in his back yard.
// The garden can be seen as a grid with 2 rows and N columns.
// You are given a description of the garden: a vector <string> garden with 2 elements, each containing N characters.
// The character '.' represents an empty grid cell, and the character '*' a cell that contains a tree.
// 
// 
// 
// 
// 
// Two cells are considered adjacent if they share a side or a corner.
// As you may know, whenever two trees grow in adjacent cells, they hinder each other's growth.
// Therefore, Devu would never plant a tree into a cell that is already adjacent to a cell with a tree.
// (This is also true for all the trees already present in his garden.)
// 
// 
// 
// 
// 
// Given the above rule, Devu wants to plant as many additional trees as possible.
// Return the largest possible number of trees Devu can have in his garden at the end.
// 
// 
// DEFINITION
// Class:DevuAndPlantingTrees
// Method:maximumTreesDevuCanGrow
// Parameters:vector <string>
// Returns:int
// Method signature:int maximumTreesDevuCanGrow(vector <string> garden)
// 
// 
// CONSTRAINTS
// -N will be between 1 and 50, inclusive.
// -garden will contain exactly 2 elements.
// -Each element of garden will contain exactly N characters.
// -Each character of each element of garden will be either '.' or '*'.
// -No two of the already planted trees are in adjacent cells.
// 
// 
// EXAMPLES
// 
// 0)
// {"..", ".."}
// 
// Returns: 1
// 
// You can plant a single tree in either of the four available cells.
// 
// 1)
// {"..", ".*"}
// 
// Returns: 1
// 
// You cannot plant any additional trees.
// 
// 2)
// {"...",
// "..*"}
// 
// Returns: 2
// 
// The garden already contains one tree in a corner. One optimal solution is to plant one additional tree in the opposite corner.
// 
// 3)
// {".....*..........",
// ".*.......*.*..*."}
// 
// Returns: 7
// 
// 
// 
// 4)
// {"....*.*.*...........*........",
// "*..........*..*.*.*....*...*."}
// 
// Returns: 13
// 
// 
// 
// 5)
// {".....*..*..........*............................*",
// "*..*.............*...*.*.*.*..*.....*.*...*...*.."}
// 
// Returns: 23
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
