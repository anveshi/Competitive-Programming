#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class ClassicProblem {
public:
	long long maximalValue(vector <int> cnt, vector <int> w, vector <int> v, int limit) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, int p3, bool hasAnswer, long long p4) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << p3;
	cout << "]" << endl;
	ClassicProblem *obj;
	long long answer;
	obj = new ClassicProblem();
	clock_t startTime = clock();
	answer = obj->maximalValue(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	int p3;
	long long p4;
	
	{
	// ----- test 0 -----
	int t0[] = {100,100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {3,5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 6;
	p4 = 10ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {100,100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {3,5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 5;
	p4 = 8ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {100,102};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {3,5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 1000000000;
	p4 = 810ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {100,100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {3,5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 1;
	p4 = 0ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1,2,3,4,5,6,7,8};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {4,2,6,7,5,8,3,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {3,6,4,1,2,8,5,7};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 15;
	p4 = 73ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {1000000000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1000000000};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 1000000000;
	p4 = 1000000000000000000ll;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// This task is about a classic problem in computer science: the knapsack problem.
// 
// 
// There are n types of items.
// The types are numbered 0 through n-1, inclusive.
// For each valid i, you have cnt[i] items of type i, and each of these items has weight w[i] and value v[i].
// You are given the vector <int>s cnt, w, and v.
// You are also given an int limit.
// 
// 
// Find a subset of the available items such that:
// 
// the total weight of the selected items is smaller than or equal to limit
// the total value of the selected items is as large as possible
// 
// Return the total value of the selected items.
// 
// 
// DEFINITION
// Class:ClassicProblem
// Method:maximalValue
// Parameters:vector <int>, vector <int>, vector <int>, int
// Returns:long long
// Method signature:long long maximalValue(vector <int> cnt, vector <int> w, vector <int> v, int limit)
// 
// 
// CONSTRAINTS
// -cnt will contain between 1 and 80 elements, inclusive.
// -cnt, w and v will contain the same number of elements.
// -Each element in cnt will be between 1 and 1,000,000,000, inclusive.
// -Each element in w will be between 1 and 80, inclusive.
// -Each element in v will be between 1 and 1,000,000,000, inclusive.
// -limit will be between 1 and 1,000,000,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {100,100}
// {2,3}
// {3,5}
// 6
// 
// Returns: 10
// 
// You have two types of items.
// Items of type 0 have weight 2 and value 3.
// Items of type 1 have weight 3 and value 5.
// You have 100 items of each type.
// The weight limit is 6.
// The best solution is to take two items of type 1.
// The total value will be 5 + 5 = 10.
// 
// 1)
// {100,100}
// {2,3}
// {3,5}
// 5
// 
// Returns: 8
// 
// We have the same items as in Example 0, but now the weight limit is only 5.
// In this setting the best solution is to take one item of each type.
// The total value will be 3 + 5 = 8.
// 
// 2)
// {100,102}
// {2,3}
// {3,5}
// 1000000000
// 
// Returns: 810
// 
// Again we have the same 200 items.
// This time, the weight limit is 10^9 and the optimal solution is to take all 200 items.
// 
// 3)
// {100,100}
// {2,3}
// {3,5}
// 1
// 
// Returns: 0
// 
// We can't take anything.
// 
// 4)
// {1,2,3,4,5,6,7,8}
// {4,2,6,7,5,8,3,1}
// {3,6,4,1,2,8,5,7}
// 15
// 
// Returns: 73
// 
// 
// 
// 5)
// {1000000000}
// {1}
// {1000000000}
// 1000000000
// 
// Returns: 1000000000000000000
// 
// Note that the answer can be very large.
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
