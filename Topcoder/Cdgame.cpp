#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
typedef long long LL;

using namespace std;


class Cdgame {
public:
	int rescount(vector <int> a, vector <int> b) {
		set <int> S3;
		vector <int> S1, S2;
		int n= a.size();
		int s1 = accumulate(a.begin(), a.end(),0);
		int s2 = accumulate(b.begin(), b.end(),0);
		for(int i=0;i<n;i++){
			for(int j=0;j<n;j++){
				S1.push_back(s1-a[i]+b[j]);
				S2.push_back(s2-b[j]+a[i]);
			}
		}
		for(int i=0;i<S1.size();i++){
			S3.insert(S1[i]*S2[i]);
		}
		return S3.size();
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	Cdgame *obj;
	int answer;
	obj = new Cdgame();
	clock_t startTime = clock();
	answer = obj->rescount(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,2,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {8,16,32};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 9;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {5,5,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {3,3,4,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,2,2,100};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {31,34,55,56,57};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,4,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 15;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Two players are playing a cooperative game.
// At the beginning of the game each player has some cards.
// There is a positive integer written on each card.
// The game is played as follows:
// 
// Each player chooses one of their cards.
// At the same time, each player gives the chosen card to the other player.
// Each player computes the sum of the numbers on the cards they now have.
// The final outcome of the game is the product of the two sums the players computed in the previous step.
// 
// 
// You are given the vector <int>s a and b.
// The elements of a are the numbers on the first player's cards at the beginning of the game.
// The elements of b are the numbers on the second player's cards.
// Compute and return the number of different outcomes the game may have.
// 
// 
// DEFINITION
// Class:Cdgame
// Method:rescount
// Parameters:vector <int>, vector <int>
// Returns:int
// Method signature:int rescount(vector <int> a, vector <int> b)
// 
// 
// CONSTRAINTS
// -A and B will contain between 1 and 50 elements, inclusive.
// -A and B will contain the same number of elements.
// -Each element in A and B will be between 1 and 100, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1,2}
// {3,4}
// 
// Returns: 2
// 
// This game can be played in four possible ways.
// One of them looks as follows:
// 
// The first player chooses the card with the number 1. At the same time, the second player chooses the card with the number 3.
// Each player gives the chosen card to the other player. After the exchange the first player has the cards with numbers 2 and 3, and the second player has the cards with numbers 1 and 4.
// The first player computes that his sum is 2+3 = 5. The second player computes that her sum is 1+4 = 5.
// The final outcome is the value 5*5 = 25.
// 
// The other three ways correspond to the following outcomes: (2+4)*(1+3) = 6*4 = 24, (1+3)*(2+4) = 4*6 = 24, and (1+4)*(2+3) = 5*5 = 25.
// Hence, only two different outcomes are possible: 24 and 25.
// Thus, the correct return value is 2.
// 
// 
// 1)
// {1,2,4}
// {8,16,32}
// 
// Returns: 9
// 
// With three cards in each player's hand there are 9 ways to play the game.
// In this case each of those ways leads to a different outcome.
// 
// 
// 2)
// {1,1,1}
// {1,1,1}
// 
// Returns: 1
// 
// Again, there are 9 ways to play the game, but obviously in this case the outcome will always be the same.
// 
// 
// 3)
// {1,2,3}
// {5,5,5}
// 
// Returns: 3
// 
// 
// 
// 4)
// {3,3,4,1}
// {2,2,2,100}
// 
// Returns: 4
// 
// 
// 
// 5)
// {31,34,55,56,57}
// {1,2,3,4,5}
// 
// Returns: 15
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
